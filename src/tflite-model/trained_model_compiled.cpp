/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 20.05.2023 06:29:25

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 18128;
#else
constexpr int kTensorArenaSize = 17104;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[13];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,7960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0018229166744276881, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 199, 40, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 199, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 100, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 100, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 800, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*40] = { 
  /* [0][0][][] */ -16,-74,-97,71,74,46,52,57,15,-53,-44,45,31,-8,17,-8,-25,-26,-5,-1,12,6,-68,6,10,-25,-9,-23,-24,-23,-51,-12,-41,-30,5,-63,-85,-127,-13,-99, 49,-52,-41,21,29,76,-7,-42,-1,9,33,24,24,-43,11,76,-16,-6,20,-12,9,-5,-9,-5,8,-27,9,-32,-6,-17,-40,1,10,-1,16,-58,-56,-114,-7,-62, 20,-86,-78,46,52,66,63,53,-30,-16,-15,25,35,-18,4,44,-25,-26,-10,11,32,-8,-46,-16,13,-6,-10,-4,-23,-26,-65,-8,-6,-45,8,-73,-58,-109,-8,-98, 
  /* [1][0][][] */ 14,55,45,-13,7,-49,72,46,99,-30,-41,-2,66,7,-7,-7,34,-20,-18,-23,-74,-5,-29,-127,8,-17,3,-53,-29,48,23,-86,-45,-86,-70,-40,-21,-22,-32,-27, -94,72,67,19,-3,-60,56,23,113,-81,-103,37,6,-45,-62,-8,24,18,-27,-42,-7,-6,7,-71,-17,-10,-33,-48,-39,28,21,-20,-30,-63,-78,4,-52,23,19,20, -57,52,57,52,41,-80,71,53,86,-53,-73,21,73,-20,-8,-16,42,-8,-42,-78,-4,10,-67,-90,-32,-39,-42,-5,23,6,1,-49,-3,-19,-34,9,10,29,19,-1, 
  /* [2][0][][] */ -63,-3,1,11,-44,-1,33,84,31,-88,-74,45,17,32,18,30,-3,26,20,14,-18,-3,-10,3,1,-26,10,-64,8,-35,-11,-32,-20,-86,-78,-8,-64,-15,-52,-89, -28,-49,-42,100,73,-2,46,31,10,-43,-6,-38,22,14,65,24,3,2,-35,-10,-28,-59,-35,-31,8,12,-15,-10,19,-17,8,-40,-33,-83,-80,-39,-18,26,-57,-75, -127,-57,-6,37,58,-39,53,40,8,-79,-44,-27,41,38,56,11,-33,45,10,-52,39,-31,-18,-41,-15,31,61,-40,-10,-22,2,-14,-8,-34,-35,27,0,21,6,-88, 
  /* [3][0][][] */ 108,83,55,69,69,13,22,40,94,67,65,28,8,62,19,-30,8,0,-9,-1,8,3,-27,-24,-15,-49,-37,-51,-54,15,-9,13,56,15,23,-15,-41,-1,14,34, 29,78,80,10,47,34,39,27,78,65,23,40,26,15,5,18,21,22,5,7,6,2,-21,-18,-44,-15,-16,-30,-26,26,0,0,11,39,10,-26,-38,-44,35,30, 116,85,127,22,49,24,-4,-14,81,42,56,56,17,28,23,-40,20,15,-4,17,1,-32,-31,-35,-29,-65,-28,2,-66,12,-16,41,35,37,29,-16,-62,-41,29,75, 
  /* [4][0][][] */ 40,-25,-58,77,91,103,-25,-27,-90,-42,-37,45,-18,27,-6,-58,-58,10,-46,-38,-3,-63,64,-37,3,17,-25,-41,26,-48,-36,-79,-45,-84,-72,-37,0,31,-62,-43, 52,-38,-64,24,44,105,-90,-81,-45,-14,-5,-9,-86,-37,-45,-53,-22,-11,-33,25,-3,-59,12,7,25,16,-30,-60,-45,-32,-55,-72,-102,-73,-1,24,43,21,-23,-76, 0,-63,-26,66,73,114,-21,-7,-94,-25,-16,-25,6,-37,-64,-96,-84,46,8,26,0,-4,54,-38,28,-1,13,13,4,-22,-83,-122,-10,-24,6,104,74,127,43,18, 
  /* [5][0][][] */ -4,-110,-108,19,17,-38,-10,-11,-4,-44,-30,24,93,5,15,34,-11,39,35,54,-20,-26,-21,-22,-1,0,24,-27,-8,-1,22,-5,-1,-3,0,36,4,26,-11,-33, 6,-123,-127,10,-7,-17,13,16,-86,-9,-31,-29,62,-17,16,32,-7,10,64,-13,3,-59,-45,-11,20,26,37,-22,13,26,34,-19,6,11,0,19,-2,44,15,-14, 37,-47,-55,-44,-27,-23,31,34,-42,-43,-29,35,28,-35,41,52,-18,4,18,51,-20,-30,-22,-1,39,40,36,-18,28,5,18,-47,5,-1,1,0,-9,10,-3,1, 
  /* [6][0][][] */ 59,-27,-35,19,31,22,11,0,-27,-3,-27,-6,-4,-2,2,32,-24,28,-12,-38,-41,-41,-24,5,-34,-35,-35,5,17,-41,-69,-23,-48,-23,-49,-33,-52,-74,-125,-73, 78,-3,3,13,-2,48,19,9,-76,-39,-32,-43,-7,-8,-25,72,-41,23,6,23,-11,6,-11,13,-33,-9,12,-66,-19,-25,-17,-72,-21,-66,-30,18,22,69,-14,-41, 127,-72,-78,21,23,90,-33,-42,-50,-8,-16,-20,61,41,-24,-2,-27,12,-12,0,13,46,31,-25,-6,21,33,-44,-4,-7,-2,-5,46,44,58,114,75,95,55,4, 
  /* [7][0][][] */ 115,-39,-32,4,2,79,-26,-12,-8,-12,-39,43,99,-6,-15,-9,-36,-35,22,-2,41,6,82,67,69,55,-4,-52,6,11,-28,-81,7,-43,-25,10,33,81,58,6, 48,-75,-78,75,44,33,-27,-27,36,-42,-46,3,61,-41,-46,-2,-37,-9,-15,-28,-4,-36,36,-54,56,54,9,-37,19,23,8,-40,-67,-25,-81,-34,-15,55,20,-45, -6,-21,-20,-43,-25,15,-9,-7,-84,-5,-28,35,9,-15,-49,0,-41,-11,-22,-7,-24,12,-16,-34,-10,32,2,-5,-59,-35,-43,-43,-127,-82,-56,-55,-56,-15,-36,-30, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0091873463243246078, 0.0081649329513311386, 0.0069473707117140293, 0.0080819148570299149, 0.006577156949788332, 0.011821761727333069, 0.010407280176877975, 0.0098386509343981743, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 17912, 2647, 28928, -24708, 11453, -15670, 1219, 5745, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 1.6747766494518146e-05, 1.4883992662362289e-05, 1.2664478163060267e-05, 1.4732657291460782e-05, 1.1989609447482508e-05, 2.1550085875787772e-05, 1.8971604731632397e-05, 1.7935040887095965e-05, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ 67,-46,-42,108,-4,-53,41,11, 103,-127,-78,3,-38,-37,15,-22, 80,-103,-23,89,-7,28,20,-10, 
  /* [1][0][][] */ -127,-38,-114,-39,-37,-67,-2,-28, -112,-68,-95,27,-39,-39,-8,-70, -8,10,-54,96,14,-21,55,0, 
  /* [2][0][][] */ -25,-56,-15,-5,-35,36,-58,-56, 6,-47,-37,127,-2,3,-12,1, -81,-65,-3,-13,-62,27,77,-48, 
  /* [3][0][][] */ -13,-113,-50,22,-20,9,-56,29, -3,-108,-8,127,35,10,8,25, -54,-111,14,15,-44,29,46,-41, 
  /* [4][0][][] */ -73,-91,-32,78,1,8,-32,9, -40,-78,-30,-21,-34,-14,-6,12, 11,-127,-25,106,-28,19,-10,-3, 
  /* [5][0][][] */ -60,46,-43,-12,46,57,-24,127, -122,-16,-50,-19,35,88,-41,-64, -102,120,7,5,25,-57,0,104, 
  /* [6][0][][] */ -22,3,33,-4,-35,-29,-52,101, -33,-15,87,-25,32,93,6,-75, -127,44,-16,0,38,-6,-27,2, 
  /* [7][0][][] */ -26,56,63,-7,7,70,80,26, -76,39,-19,-5,58,18,68,-73, -127,55,-35,16,10,-7,-17,49, 
  /* [8][0][][] */ -114,55,53,-10,9,-52,89,80, -117,-4,-5,-1,96,-13,49,37, -104,23,34,-9,34,-51,127,14, 
  /* [9][0][][] */ -109,14,23,-10,42,45,-46,3, -95,86,63,-11,29,-27,59,-23, -127,73,13,6,-9,-35,68,16, 
  /* [10][0][][] */ -52,71,17,-9,-16,-47,-46,82, -45,32,20,-7,55,-22,75,-23, -100,65,-35,-5,10,-10,127,-25, 
  /* [11][0][][] */ -104,-127,-70,73,-28,-37,10,-80, -99,-67,-67,-33,-34,-51,-24,-25, -68,-66,-53,119,24,-29,11,-9, 
  /* [12][0][][] */ -12,61,-4,-20,37,6,41,-28, -96,4,21,-22,75,-79,52,36, -127,62,-43,4,-12,70,42,69, 
  /* [13][0][][] */ -77,-70,-60,72,-40,-127,0,-57, -116,-99,-37,-17,33,-46,-81,-28, -102,-57,-46,46,-31,-8,-30,-16, 
  /* [14][0][][] */ 127,7,72,4,-26,6,-14,21, 112,-37,-14,-5,11,-34,-63,65, 50,-52,57,-67,-14,-32,-41,58, 
  /* [15][0][][] */ 127,48,48,24,-41,-71,-9,38, 48,-38,43,-47,12,-13,2,66, 92,-43,59,-65,-36,-27,-13,49, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0048981518484652042, 0.0068906387314200401, 0.0079415850341320038, 0.0069701909087598324, 0.0069483648985624313, 0.0067780753597617149, 0.0084509942680597305, 0.0096645345911383629, 0.0082062352448701859, 0.010060083121061325, 0.0092509882524609566, 0.0059966430999338627, 0.0098352972418069839, 0.0072921901009976864, 0.0057813567109405994, 0.0062961345538496971, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -3221, -272, -2872, -4332, -3847, -1609, -628, -530, -415, -487, -863, -2908, -354, 286, -1849, -2050, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 5.5243719543796033e-05, 7.771594391670078e-05, 8.9569024567026645e-05, 7.8613171353936195e-05, 7.8367011155933142e-05, 7.6446398452389985e-05, 9.5314389909617603e-05, 0.00010900128108914942, 9.2553877038881183e-05, 0.00011346246901666746, 0.00010433710849611089, 6.7633030994329602e-05, 0.00011092722706962377, 8.2244834629818797e-05, 6.5204927523154765e-05, 7.1010843385010958e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[20*800] = { 
  -20, -32, -66, -39, -46, 2, 28, 15, 10, 2, 11, -38, 7, -7, 10, -2, -9, 23, 30, 14, 2, 6, -9, 12, 18, 18, 4, -26, 6, 4, -12, -10, 1, 27, -23, -20, -35, 6, 13, 21, 53, 24, 51, -30, 19, 24, -1, 2, -20, 25, -30, -32, -17, -9, -16, -11, 0, 2, 8, -2, 30, 27, -28, -20, -6, 13, -17, -15, 0, -3, 2, -26, 9, 12, 23, -20, -13, -25, -26, -9, -4, -14, -53, -30, -16, -23, -16, 2, 28, 23, 29, -44, 1, -8, 12, 14, -12, -4, -37, -29, 11, -11, 1, 0, 33, 18, 33, -30, 44, 15, 21, 27, -31, -9, 10, -12, -5, 36, 63, 21, 26, 55, 19, -11, 38, 2, 2, -20, -32, -10, -11, -12, -19, 21, 9, 24, 17, 39, 24, -40, 15, -4, -36, -29, -8, -3, -37, -10, -20, 3, 9, 5, 12, 6, 30, -17, 25, -9, -22, -2, -17, -54, -15, -21, -11, 31, 19, 32, 38, 38, 29, -24, -30, -25, -17, -4, -34, -31, -47, -49, -24, -15, -6, -16, 8, 7, 23, -30, -9, -9, -25, -35, -14, -17, 15, -33, -37, -22, -5, -26, 22, -9, 14, -21, -17, -22, -16, -2, 3, 15, -4, 12, -17, 11, -9, 9, 15, 10, -12, -21, 11, -14, -10, -1, -31, -30, -40, -32, -44, -15, -6, -9, 7, 2, 27, -34, -16, 16, -24, -11, -27, -10, -38, -45, -47, -27, -11, -8, 16, -1, 26, -29, 19, -13, -25, 0, -21, 0, -61, -54, -74, 3, 13, 24, 10, 10, 1, -42, 14, 10, -8, 0, -27, -31, -30, -53, -43, 30, 62, 59, 38, 2, 39, -51, 44, -5, -21, -7, -33, 11, -20, -19, -44, -14, -13, 5, 12, -9, 18, -48, 10, 14, 2, 1, -9, -13, -40, -49, -31, -5, -18, 11, 25, 8, 27, -16, -30, 11, -16, 7, -46, -28, -64, -32, -53, -24, -9, 4, 20, 9, 15, -69, 33, 20, -39, -17, -2, 21, -43, -44, -14, 36, 24, 14, 31, 38, 26, 4, 2, 7, -18, -20, -10, -1, 35, -18, -54, -2, 5, 19, -2, 0, 33, -21, 13, 22, 3, -12, -2, -12, -64, -49, -26, 15, 14, 24, 5, 5, 9, -17, 20, 7, 8, 2, -6, -18, -26, -31, -30, 12, 12, 17, -9, 11, 18, -23, 4, 3, -30, -23, -19, 19, -36, -22, -25, -6, -21, 7, -24, -19, -16, -21, 6, 8, -18, -33, -10, 25, -3, -10, -53, -15, -20, -9, -5, 9, 21, -19, 20, 26, -13, -3, -10, -3, -63, -53, -29, 22, 5, 21, 18, 19, 7, -19, 10, -12, 21, 15, -22, 11, -45, -64, -31, 9, 7, 4, 10, 42, 6, -29, 13, 10, -26, -7, -21, -12, -10, -19, -33, -6, 10, 2, 7, 19, 49, -30, 6, -29, -6, -13, -4, -18, 4, -12, 13, -13, -3, 16, 30, 20, 25, -26, 33, -16, 0, 9, -18, -2, -20, -35, -50, 10, 7, 20, 10, -11, 16, -37, 22, 6, 7, 2, -20, 21, 7, -15, 9, 8, 31, 43, 28, 33, 23, 12, 14, -6, -16, -26, -23, 4, -11, -15, -30, -5, 19, 16, 30, 16, 16, -13, 21, 33, -37, -33, -7, 18, 6, 0, 3, 17, 29, 20, 0, 16, 7, -19, 9, 23, -9, 3, 6, -39, 2, 0, 5, -7, -2, -14, 2, 7, 25, -36, -23, 8, -21, -7, -5, -22, 11, -16, -27, -15, -4, -19, 18, 11, 13, -26, -8, -8, -10, -3, -25, -31, -21, -21, -2, -31, -6, -10, 35, -20, 35, -15, -29, 0, -15, 5, -29, -4, -39, -20, -10, -28, -24, 8, 37, 17, 28, -6, -1, -15, -9, -10, -9, -27, -52, -66, -19, -5, -6, -4, 37, -17, 28, -49, -8, 1, -3, 13, -28, 17, -28, -44, -2, -41, -25, -20, 18, -5, 46, -3, -39, -6, 10, 2, 8, 6, -25, -22, -35, 3, -5, -5, 28, -2, 14, -39, 11, 29, -18, -1, -14, -29, -52, -43, -5, 4, 10, 41, 29, 34, 45, -38, 45, 19, -8, -3, -18, -18, -29, -26, -25, -7, -20, -17, 13, 0, 29, -34, 3, 27, 2, -1, -31, -4, -14, -15, -21, -26, 4, 8, 19, 20, 16, -38, -8, -2, -15, 8, -26, -7, -59, -24, -50, -1, -2, 1, 14, 22, 9, -37, 25, 24, 0, -10, -6, -24, -26, -29, -21, 25, 1, 13, 25, 33, 3, -4, 35, -11, -13, -9, 10, -14, 42, -9, -19, -5, -40, -12, 17, 4, 21, -17, -24, 1, -1, 8, -13, 1, -15, -22, -34, 23, 18, -2, 37, -2, 28, -26, 32, 3, -9, -1, 0, -37, -37, -52, -39, 1, 33, -3, 24, 8, 19, -32, 1, -3, -1, -11, 
  3, 0, 0, 2, -4, -3, -3, -1, -6, 0, -6, 4, -3, -5, -4, 3, -2, 5, 0, -3, 1, -2, 3, 1, -7, 1, 0, 2, -7, -2, -1, -1, -2, -1, 3, -9, -1, -9, -11, -6, -2, -3, 0, -3, -11, -2, 1, 1, -4, -6, 1, 4, 0, -2, -3, 0, -12, -6, 0, -2, 1, -4, 4, -4, -3, 1, 1, 0, -2, -6, -3, -5, -2, -1, -3, 0, -9, 1, -7, 1, 4, 8, 4, 4, -3, 1, -7, 1, -2, -6, -5, 6, -10, -8, 2, 0, 0, -8, 6, 0, -5, -2, -6, 1, -4, -6, -5, 6, -4, -5, -5, 4, -6, 3, 5, 3, 2, -4, -6, -2, -9, -8, -7, 5, -5, -8, -9, -5, 6, 0, 9, -4, -1, 0, -7, -3, -9, 1, 1, -1, 1, -1, 0, 2, 2, 1, 10, -3, -3, -6, -1, -10, -4, 5, -1, 2, -7, -7, -5, 1, -2, 3, 4, -1, 4, -5, -6, -8, -5, -5, 1, 5, -8, 4, -3, 1, 5, 2, -1, -4, -2, -2, -6, 2, -10, 0, -5, 7, -8, -6, -8, 0, -1, 3, 3, -4, 1, -6, -2, -7, -7, 2, -5, -4, -9, 0, -6, -9, 3, -2, 3, -6, -4, 1, -3, 1, -9, -6, 4, -3, -3, 1, -8, 1, -2, -4, 1, 5, -4, -2, -9, -1, -9, -2, -5, 1, -5, -7, -4, -3, 0, -1, 8, -3, -10, -1, -3, -3, -6, -8, -8, 4, -5, -4, -8, 1, 0, -8, -2, -4, -1, 1, -8, 1, -13, -2, -6, 0, 1, -9, -1, -3, -2, -6, -10, 3, -1, -5, -3, -1, -6, -3, -6, 0, -5, -8, 0, 2, -7, -2, -1, 1, -3, 2, -2, 1, -8, -4, -1, -6, -8, -10, 1, 3, 7, -5, 11, 4, 4, 1, -2, -5, -2, -3, 0, 0, -6, -5, -8, -5, -5, -10, -2, -2, -8, 0, -1, -3, -9, -13, -1, 0, -7, -1, 2, 1, -4, -1, -2, -3, -3, -3, -5, -1, -13, -7, -12, -1, -5, -4, -1, -3, 6, 0, 0, 5, -4, 3, -9, -6, -11, -6, -3, 0, 2, -6, 4, -4, 0, -2, -1, 0, -6, -10, -9, -2, -5, -2, -1, 3, 3, 3, -5, -2, -4, 4, -1, -4, -4, -3, -9, -4, -7, 1, -5, -1, -2, -12, -8, -4, 5, -4, -3, -4, 3, 3, -3, 1, -1, 0, -2, 1, -4, 1, -3, -2, 1, 6, -2, 4, -8, -5, 3, -5, -1, -2, 3, -11, 1, 0, -2, -3, 4, 1, 5, 6, -2, 2, -2, -5, 2, -4, -8, 7, -3, -6, -7, -4, -2, 5, 5, -4, 4, 2, -6, -4, -9, -10, 1, -2, -1, -4, 6, -3, 2, 6, 4, -5, -1, -3, -10, -5, 2, -1, -4, 5, -9, 2, -3, 0, -4, 6, 6, -2, 2, -5, -1, 2, -8, -2, -2, 9, -3, -3, -1, -1, -5, 5, 2, -4, -1, 0, 1, -6, -3, 2, -5, -4, -2, 0, 6, 2, -1, 7, 6, 5, -1, -1, -2, -2, -3, 3, -7, 2, -10, -2, -2, -3, 3, -1, 2, 0, 3, -2, -9, -8, -8, -7, 2, -1, 2, -2, 1, 7, 0, 4, -3, -1, 1, -7, -8, -9, -1, -5, -6, 3, -6, -1, -4, 4, 1, 0, 0, -2, -2, -7, -6, -7, -10, -8, -11, -2, -6, 1, 10, 8, 2, -5, 5, -4, 6, -3, -4, -8, -5, -2, -7, 5, -4, -5, -3, -8, 0, 1, 10, -2, 1, -5, -9, -12, -5, -3, -2, 3, 2, -2, -6, -1, 7, -3, 9, -1, -2, -8, -4, -2, -2, 0, -2, 4, -2, -1, -5, 4, 8, 8, 15, 0, -2, -6, -4, 0, -7, 1, 1, 10, 1, 2, -7, -7, 7, 9, 9, 7, 1, -7, -3, -7, -1, 1, -6, 8, -6, -4, -7, 3, 6, 7, 10, 3, -1, -3, -2, -7, -4, -1, 2, 7, -6, -3, 4, 0, 9, 3, 13, 8, -6, -9, 1, 2, 1, -3, -5, 7, -4, -11, -3, 3, 12, 8, 7, 7, 7, -6, -6, -7, -4, -8, -2, 0, -3, 3, 0, 1, 6, 8, 12, 2, -3, -6, -4, -6, -1, 2, -9, 3, -1, -1, 0, -4, -1, 1, -3, 3, 2, -6, -9, 2, -3, -8, 0, 1, -2, 2, 4, 4, -4, 3, 2, 0, 0, 0, -6, 2, -2, -4, -3, 0, -7, 0, 6, 0, -3, 3, 6, -2, -7, 2, -5, -3, -2, -8, -7, -2, -1, -2, 2, -2, -7, 2, 8, 5, -1, 1, -3, -4, -5, 0, 3, 1, 1, 2, 1, 3, -3, -2, 8, 1, 1, -2, -2, -9, -3, 1, -1, -3, -6, -9, -4, -5, 
  -8, 0, 6, 3, 1, -1, -5, 3, -2, -6, -6, -5, -6, -2, 0, 0, -2, -3, -4, 0, -4, 1, 2, -3, -3, -6, 6, -4, 3, -3, -8, -4, 3, -2, 1, -1, 1, 1, -5, -5, 0, -7, -6, -4, -6, -5, -2, -6, 2, -6, -3, -4, -7, 0, -7, -3, -1, 1, 3, -4, 3, 3, 3, -6, -8, -6, -8, -4, -2, -1, -8, -5, -4, 2, 2, -3, 3, 4, 2, -4, 2, 0, -4, -6, -7, -7, -7, -6, -3, -3, -2, 3, -7, -9, 1, 0, -1, -3, -1, -2, 1, 0, -6, 4, 1, -5, -1, -7, -4, -4, 1, -1, 0, -1, -2, 2, -1, -8, -2, -2, 2, -4, -7, 1, 0, 2, -1, 3, -5, -1, 1, 0, -7, 2, 3, 1, -2, 4, 1, -3, -7, 1, -4, -5, 0, -3, 0, 0, -7, -2, -5, -3, -7, -5, -4, -2, 3, 4, -8, 1, -6, -3, 3, 2, 0, -5, -2, 1, -5, -2, -4, -8, -2, -10, -3, -5, -6, -1, -4, -3, 3, -6, 1, 2, 5, -3, 7, -7, 0, 3, -3, -6, 3, -8, -4, 1, 2, 1, 1, 2, 0, 1, 0, 2, -4, -6, -1, -4, -5, -6, 3, -7, -2, -7, 3, -2, -2, -3, 3, -7, -6, -5, -4, 5, 1, 2, -7, 0, 0, -1, 3, -1, -2, -3, 7, 1, 2, -8, -3, -2, -6, 0, 1, 0, -6, 0, -4, -1, -7, -7, -5, -4, -1, 0, 1, 0, 0, -8, 2, 2, -1, -4, -3, -2, 1, 3, -6, -2, 0, 3, -7, 4, -8, -7, -6, -4, 3, -4, 3, -7, 2, -5, 4, -7, -6, -7, -1, 1, -5, -5, 2, -6, -6, -1, 1, -1, 3, -5, -2, 0, -3, 2, -6, 5, 2, -6, -3, -5, -3, 2, 0, 0, -7, 2, 1, 4, 1, -6, 3, -2, -5, -3, 1, -1, -4, 2, 0, 0, -4, -1, -2, 0, -7, -8, -3, -1, 0, -5, -8, -1, 2, -1, -2, -3, -7, 3, 0, -4, -7, -6, 3, 2, -2, 1, -8, -5, -5, -3, -1, 1, -2, 3, 0, 3, -6, -2, 1, 3, 3, 0, 1, -2, 3, 0, -2, -8, 1, -4, -2, -2, 1, -2, -5, -3, -3, 0, 0, 0, -7, -2, 1, 1, 2, 2, 0, -2, -2, -1, 1, -1, -6, 1, 4, -2, -4, 2, -1, 2, 6, -7, -4, -8, -3, -2, -8, 3, 1, -8, 2, -5, 0, 0, -6, -2, 2, -2, -6, 3, -2, -8, 1, -6, -5, -8, -5, -5, -7, -2, 0, -8, -4, -2, -8, -5, -1, -2, 3, -5, 4, 5, -1, 1, -1, -4, 1, -3, -3, -2, -4, -4, -3, -2, -1, -8, -2, 3, -1, -6, -2, -2, -4, 1, -4, 2, 3, 1, -1, 2, 0, -6, 2, -3, 2, -5, -3, -6, 1, -3, 2, -4, -7, -3, -7, 1, 2, -6, -8, -2, 3, -7, 2, -2, 2, -1, 5, -1, 1, 5, 3, 1, -3, -3, -6, -1, -4, -3, 1, 1, -3, -4, -3, 3, 5, -2, -1, -1, -3, 8, -1, -2, -2, -1, -1, -6, 2, -4, -4, 2, 2, 2, -1, -4, 2, -1, 4, -3, -4, 0, -7, -4, -5, 2, 3, 0, 0, -1, 2, -2, 3, -4, -1, -5, -3, -7, -3, -7, -1, -7, -7, -2, -8, -7, -3, -2, 1, -2, 4, 2, 0, -4, 3, -7, 1, 3, 3, -2, 2, -5, 2, -3, -2, -5, -1, 0, 3, -1, 1, 0, -3, 1, 1, 0, -3, -5, -7, 3, 0, 1, -6, -3, -1, 1, -6, 3, -7, 2, 0, 2, -5, 2, -5, -9, 2, -3, -4, -8, -8, -3, -1, 0, -7, -3, -4, -4, -7, 2, -6, -8, -3, 1, -4, -4, -4, -1, 2, -8, 5, -8, -3, -3, 2, 1, 0, -1, -8, -6, -1, 1, 0, -5, -6, -2, 1, -6, -7, -1, 1, 2, -1, -3, -4, 0, -4, 0, -5, -7, 1, -1, -7, 0, -1, -1, 2, -3, 3, -3, -3, -4, -6, 1, -7, -7, 3, -1, -4, -5, -4, -3, -3, -2, 1, 2, -2, 6, 1, 3, -3, 3, -6, -1, 2, -3, -5, -3, -1, -3, -4, -2, 1, 2, 1, 2, 4, -5, -8, -6, -5, 2, 4, 1, -6, -3, -7, 1, 1, -4, -4, 2, -2, -1, -2, -7, -1, -1, -2, -5, 4, -3, -5, -6, -2, -3, 1, -2, -2, -3, -2, -5, -2, -2, -2, -4, 0, -2, -6, -6, -4, -3, -6, -5, -2, -1, -4, -8, 3, 0, -8, -6, -8, -2, 1, -2, 2, -6, -5, -1, 4, -2, -4, -4, 5, 3, 1, -7, 5, 0, 2, -1, -6, -3, 
  -9, -2, -6, 3, 1, 3, -6, -5, -4, -8, 1, 0, 1, 1, 5, -8, 2, -6, 1, -4, -1, -5, -8, -4, 0, -2, 3, -1, -8, -2, -1, -6, 5, -7, -2, -3, -5, -7, -6, 3, 2, -7, -3, -3, 2, -13, 5, 0, 3, -2, 0, -3, -3, -4, 2, -3, -5, 3, 4, 3, -1, -13, 2, -1, -6, -2, 1, 2, 2, -3, -2, 3, -6, -1, -1, 2, -4, -3, 8, 0, 1, 0, -4, -5, 6, -6, -5, 2, -4, 1, -2, 4, -6, -6, 2, -3, -9, 5, 0, 3, -3, -1, -3, 3, -2, -4, -1, 4, 3, -7, 3, -4, 0, -3, -3, 3, -4, -5, -6, 2, 0, 0, -2, 2, -8, -3, -1, 5, -5, -4, -8, 1, -1, -2, 0, -5, 0, -2, 0, 6, 2, 1, -3, 1, 0, 2, 1, 3, -6, 1, 0, 0, -5, -3, 2, 2, 1, 0, -3, 1, -7, 3, 3, -2, -1, 2, 5, -6, 3, 4, 1, -2, -7, -4, 5, 3, -4, 2, -5, 2, 0, 3, 4, 4, -4, 3, -5, 1, -7, -3, -8, 4, 1, -4, 3, -2, -5, 4, 4, 1, -1, 4, 0, -8, 3, -2, 3, -8, -2, 2, 3, -1, -2, -5, -6, -6, -2, 0, 4, -1, -3, 1, 5, 5, 2, 1, -2, -1, -3, 1, -2, 0, -5, -7, -1, -6, 1, 0, 5, -5, 0, 3, -4, -1, -5, 0, 1, 1, 0, -2, 2, -5, 0, 5, 0, 4, -1, 0, 2, -4, -5, -1, 0, -1, -6, 2, -6, -4, -3, 3, -1, -4, -2, -3, 0, -2, 1, -5, 4, 3, 0, 2, 0, 3, -2, -6, 5, -7, -2, 5, -7, 4, -6, -7, -4, -2, 0, -1, -3, 2, -6, -2, 0, -4, 1, 4, 2, 2, -4, -2, -5, 1, -6, -1, -4, 0, -2, -4, 0, 2, -10, -3, -3, -3, -4, 0, 0, -3, -7, -4, -6, -2, 5, -9, -4, 0, 0, 3, -8, -3, -5, -3, -5, -8, 3, -4, -5, 3, -3, -4, -6, -4, 1, -1, -7, 2, -1, 3, 4, -5, 1, -5, 0, 0, 2, -1, -7, 4, -7, -3, -4, 2, -4, 2, -5, 1, -3, -2, -8, 4, -7, -1, -5, -1, -2, -4, 6, 0, -1, -4, -2, -1, 2, -3, -5, 0, -1, -8, -1, 0, -2, -6, -3, -6, -1, -4, 4, -3, -3, -1, 0, -5, -2, -1, 7, -5, -5, -3, 3, -4, -3, -5, 3, -1, -1, -2, -4, 2, 1, -4, 4, -4, -4, -5, -5, 2, 4, 0, 0, 1, -5, 5, 1, 0, -6, -9, -2, -7, 1, -5, 0, -5, 2, -7, 1, 0, -1, -1, -1, 5, 1, -2, 5, -7, 4, 5, 1, 1, -1, 4, 3, -5, -6, 3, -3, -4, 3, -13, -3, 4, -5, 4, -2, -5, 0, -5, -2, -3, 2, -6, -5, -7, 0, -8, 1, 2, -5, 7, 0, 0, -6, 1, -6, -7, 0, -3, 5, -1, 0, -7, 4, -1, 0, 0, 1, 5, -3, 3, 0, 1, 0, 1, -7, -6, -6, -1, -4, -7, -5, -1, 5, 3, -5, -5, -4, -3, -5, -6, -6, -2, 0, -8, 0, -1, -2, 2, -3, 1, 0, 3, 2, -10, 2, -2, 4, -5, -4, -12, -1, -6, -4, 1, 2, 2, -2, 0, -5, 1, 2, 1, 6, -3, -4, -10, 2, -4, 1, -6, -2, -3, -2, 5, 5, -3, -7, -4, -6, -6, -2, -8, -4, 0, -2, 2, -2, -8, 2, -4, -4, -4, -9, -2, -3, -7, 4, -8, -3, 2, 1, 0, -2, -6, 0, -6, 0, -3, 2, 0, -5, 3, -1, -6, -1, -2, 4, 4, -7, -1, 0, -3, -4, -8, -5, 3, 3, 3, -3, 5, -2, -5, 5, 1, -3, -2, 0, -7, 3, 1, -1, 1, 1, 1, 2, 0, -5, -4, 7, 1, 2, 2, 3, 1, 0, -4, 3, 2, 4, 0, -5, -1, 1, -6, 0, -6, -1, -5, -6, -6, 6, -5, 0, -2, 3, 4, -6, -10, -1, 1, 1, -4, -4, 3, -7, 1, 2, -4, -2, -4, 0, -8, -6, 1, 6, 3, 0, -7, -1, -4, 1, -5, -4, -4, -1, 5, 0, 4, -3, -7, 5, -5, 1, -3, 0, -5, 1, 5, -3, 1, -3, -3, 0, 4, -2, -3, -1, -8, -5, 0, -2, -2, -5, -6, 0, -3, -2, 2, -9, 1, -7, -2, 2, 2, -2, -5, 2, -5, -4, 0, -2, -3, -4, 4, -2, -4, -5, -3, -1, 4, 2, -7, 3, -6, 1, -5, 0, -1, -8, -2, -2, 0, 0, -1, 1, 3, 0, -2, -5, 2, -5, 1, 3, -7, -6, 5, 0, -3, -1, -5, -2, 1, 
  -2, -6, -2, 1, -3, 3, -2, -4, -1, -7, 6, 2, -2, 3, 0, 0, 0, -4, 3, -7, -5, -7, 0, -1, -3, -3, 4, 2, 1, -7, -4, -5, -4, -5, 0, 0, 2, -1, 4, 4, 1, 4, -6, 3, -7, -4, -1, 3, 2, 0, -5, 3, -1, 1, -5, 2, -5, 4, -5, 1, -5, -1, -6, -7, 1, 0, -5, 1, -2, -2, -6, -1, 3, -8, -3, 3, -5, 5, -1, 0, -5, -3, -6, -2, -4, -4, 1, 2, -3, -3, 6, -1, 2, -3, 0, 0, -7, -5, 2, -5, -4, -7, -5, 1, -2, -5, 1, 3, 1, 5, 3, 5, 4, -1, -2, -5, -5, 3, -4, 0, -6, -6, -7, -3, -1, -5, -7, 2, 0, -2, -5, -3, 2, -3, 2, 1, -6, 1, -1, -2, -2, -1, -1, -1, -2, -6, 3, 1, 1, -3, -7, -4, 1, -4, -1, -5, -5, -3, -2, -3, 2, -4, -1, -5, 2, -1, -4, -3, -6, -3, -4, 1, -4, 5, 1, 3, -2, -4, 3, -2, -2, -2, 4, -3, -2, -1, -7, -2, -5, 5, 5, 2, -6, -3, -2, 3, -6, -5, 0, -6, 4, -4, 5, 1, 1, 1, -6, -3, -1, -7, 0, -5, -3, -3, 1, 2, -4, -7, -3, -1, -1, 5, -4, -2, 4, -2, -4, -6, 2, -5, 3, 0, -4, -6, -1, -3, 1, 5, -5, -2, -5, -6, 2, 0, 0, 0, 2, -7, 0, -3, 3, -4, -2, 1, -5, 2, 0, -3, 1, -7, 3, -3, 2, 3, 3, 0, 4, -7, -2, -7, -8, -3, 2, -5, -1, 1, 5, -1, -7, -6, -5, -4, 3, -1, 2, 0, 1, 4, 1, -5, -4, -6, -5, -5, -4, -6, 3, 3, -6, -6, 0, -5, -2, -5, -5, -4, 2, 2, 2, -7, -1, -5, -1, 3, -3, -3, -5, -4, 0, -3, 1, -5, -3, 1, -6, -6, -5, 0, 1, 3, 3, -2, -1, 2, -2, -4, -7, -1, -4, 0, 2, -6, -4, -5, 5, -1, -6, -7, -1, -1, -1, -6, -1, -4, 2, -1, -4, -5, -5, -1, -5, -7, -6, -7, -7, 0, 2, -1, 3, -2, 0, -2, -1, -5, 0, -6, 3, -5, 2, 0, -7, 2, -4, 3, 5, -5, -7, -5, -6, 0, 1, 3, -2, -6, -7, -1, -2, 3, -4, 2, -4, 1, -4, 0, 1, -2, -1, 2, -7, -4, -2, 1, 0, 5, 3, 2, -5, -7, 2, -1, -4, 4, -3, 0, -3, 2, 1, -5, 2, -3, -5, 5, 0, 3, -4, 0, -3, -4, 3, -6, 1, -4, -3, -5, -3, 3, 1, 2, -7, -4, -6, -6, 1, 3, -4, -7, -7, -7, 2, -2, -4, 2, 3, 4, -1, 0, 3, -5, -5, -4, 4, 2, 1, -1, -2, 0, -4, -2, 0, -2, 3, -3, -7, -5, -7, -4, -3, -5, -1, -4, -7, -7, 3, -3, -7, -4, -1, 1, -3, 2, 4, -2, -2, -5, -1, -1, -1, -4, 3, 0, -8, -1, -4, -1, 2, -6, -3, -6, -4, -7, 1, -2, 2, -2, -7, 2, 4, -1, -7, -5, -4, 3, -6, 2, -2, -2, 3, -4, 0, -1, -1, 4, -5, -2, 0, -6, -8, -3, -5, -2, -5, 1, -1, 3, -5, -7, -7, 2, -3, -4, -5, -7, -5, -6, -5, -4, 0, -4, -2, -6, -3, -2, -7, 0, 1, -1, -3, -7, -1, 2, -4, -3, -2, 4, 3, -2, -2, -1, 1, 3, 3, -1, 0, -1, -1, -2, 2, 1, -5, -3, 1, -5, 2, 0, -3, -3, -2, -5, 2, 3, -2, -5, 3, -6, -7, -3, -4, -7, 0, 0, -3, 4, 3, -4, -4, -5, 5, -4, 2, -6, 2, -3, -5, 1, 3, 2, 2, -3, -1, 0, -3, -3, 4, -3, -4, -5, -6, 0, -2, 0, -2, -2, 1, 2, -1, -3, 2, -1, 1, 1, -5, -5, 1, 5, -7, -2, -2, 0, -4, -3, 0, -4, -5, 0, -3, 2, -6, -4, 3, -1, -3, -5, 3, -5, -6, -4, -5, -5, 3, -5, -3, -3, 0, 3, -5, -3, -6, -5, 5, 1, 0, -2, -3, -6, -4, -3, -6, 2, -4, 0, 1, 3, -5, -1, 2, -6, -6, 0, -1, -2, -1, -5, -2, -2, 1, -6, 1, -1, 1, 2, -1, 3, -3, -5, 3, 0, 0, -1, 0, 2, 0, 0, -5, 2, 0, -4, 1, -7, -7, -2, 1, 0, 5, -3, 3, -1, -4, -3, -7, -2, -1, 1, 1, 1, -1, 1, 0, 1, -4, 2, -4, -6, 0, -1, 4, -7, -2, 2, 0, -7, 3, 1, -7, -3, 5, -1, -3, -4, 3, 3, 3, -5, -3, -1, -2, -8, -8, -2, -3, -6, 
  45, 48, 57, 42, 53, -11, -36, -6, 1, 19, 1, 45, 6, 33, -24, 6, 20, -36, -47, -20, -15, 3, 30, -6, 16, -7, 17, 20, 2, 25, -10, -36, -17, -6, 14, 14, 38, 26, -21, 1, -45, -40, -35, -13, -12, -3, -46, -57, 38, -4, 31, 29, 27, 11, -17, 10, 6, -12, 4, 19, -18, 16, -15, -19, 32, 8, 39, 31, 17, 0, -20, 18, -5, -19, -40, 26, -5, 42, 6, -19, 28, 38, 44, 56, 42, 8, 12, 5, -55, -43, -45, 69, -10, 45, -44, -40, 33, 18, 47, 49, 14, 6, -6, 25, -21, -2, 13, 37, 11, 23, -50, -46, -4, -8, -26, -3, -2, -20, -42, 11, -10, -37, -2, -5, -16, 13, -19, -29, 24, 18, 10, 18, 14, -13, -16, 0, -7, -41, -1, 20, 1, 18, -30, -25, 19, 14, 15, 8, 22, -9, -17, -6, -14, -27, -10, 17, -3, 14, -35, -41, 34, 29, -18, 25, 15, -26, 7, -17, -43, -15, -10, 16, 1, 19, -18, -27, 38, 60, 50, 56, 41, -19, -22, -14, -25, 9, -13, 61, -3, 0, -5, -10, 48, 4, 8, 38, 14, 25, -5, -12, -42, -8, -26, 16, 44, 42, -13, -38, -41, -8, -19, -4, -2, 28, 52, 13, 17, -11, 31, -10, 34, 15, -56, -13, 17, 20, 44, 36, 26, 50, 44, 37, -18, 16, -29, 13, 8, -14, -38, -34, 38, -10, 26, 34, 28, 32, 4, 23, -14, -11, -21, 9, 24, 0, -5, -27, 4, -27, 24, 5, 37, 28, 26, 7, 30, 8, 32, -20, 21, -28, -15, -13, 14, 20, 10, 60, 46, -15, -39, -14, -9, 5, -28, 35, -11, 10, 1, -17, 23, 1, 45, 42, 44, 2, 20, 10, 5, 12, 10, 44, -1, 1, -35, -2, 5, 8, 6, 39, 42, -9, 22, -3, -5, 7, -27, 0, 54, -5, -36, -48, 23, 10, 28, 20, 36, 25, -3, 27, -11, 22, -26, 48, 1, -14, 7, -29, 5, 35, 50, 40, 23, -21, -16, -3, -28, -42, -18, 11, -12, -11, -36, -36, 16, -4, -22, 20, 43, 12, 19, 2, 10, -6, -19, 23, -7, -18, -44, -41, 0, 33, 37, 55, 52, 4, 8, -13, 23, 16, -17, 48, -20, -20, -53, -65, -8, -38, -33, 0, -32, -7, -5, -5, 27, 9, 12, -50, 37, -3, -2, 12, -45, -23, -87, -49, -34, 42, 29, 15, 10, 31, -7, -28, 7, -32, 25, 44, -31, -14, -50, -11, 7, 14, 33, 19, -1, 9, -22, -6, 13, 5, -18, -22, 5, 24, 38, 67, 31, 16, -6, 26, 3, 2, 16, 6, -9, -5, -45, -19, 28, -4, 38, 31, 9, -1, -3, 15, 29, -31, 4, 16, 24, -11, -17, -35, 26, 15, 0, -2, 27, -14, -4, 9, 9, -1, -16, 16, 15, 31, -44, -27, 26, 35, 25, 13, -13, 5, 27, -27, -36, -6, -50, 25, -18, 30, -36, -74, 39, 23, 14, 44, 60, -17, -21, 6, 6, 52, -4, 69, -16, 23, -53, -57, 5, -24, -21, 9, -3, 6, -12, -17, 2, -31, -9, -18, 6, 30, -20, 1, 31, 27, -3, 4, 22, -4, -27, -12, -20, -7, -22, 18, -9, -1, -7, -14, 28, 7, 5, 23, 22, -6, -18, -12, 14, -14, 11, 36, -10, 17, -27, -32, 14, 19, -26, -18, -15, -25, -11, 6, -30, -36, -14, 34, -1, 16, -9, -27, 6, 44, -3, 7, 19, -10, 3, -1, -4, -14, 8, 18, 10, 34, -12, -22, 4, -4, -32, 1, -9, 13, 4, 4, -10, 13, -10, -6, -4, 3, -14, -54, 1, 23, -4, -8, -17, -2, -6, -15, -10, -38, -26, -13, -18, 41, -33, -41, 14, 33, 13, 23, 2, -26, -13, -39, -30, -11, -18, 54, -6, 31, -24, -69, 22, -17, 23, 21, 11, -10, -5, -11, -11, -9, -16, -8, 29, 22, -52, -56, -3, 7, 18, 10, 43, 0, 19, 12, 3, 13, 13, 62, -9, -5, -61, -47, 15, 39, 44, 27, 3, -27, -9, -22, -58, -20, -53, 23, -25, 17, -45, -34, 7, 29, 18, -2, 16, 2, -12, -5, -6, -27, -15, 24, 5, 17, -37, -33, 35, 7, -3, -10, 22, -2, -20, -31, 13, -37, -3, 37, -19, 16, 30, 5, -4, 26, 52, 50, 54, -7, -16, -23, -29, -36, 6, 45, -20, 5, -20, -19, 14, 36, 2, 22, 23, -34, -17, -44, -25, -34, -14, 22, -58, 14, -63, -50, -14, 29, -45, -5, 9, -30, -11, -24, -1, -31, -22, 12, -15, 33, -44, -68, 31, 25, 24, 20, 49, -25, -23, -55, -65, -21, -41, 28, -31, 9, -51, -54, 6, 52, 38, 53, 67, -19, -61, -7, 10, -31, -9, 48, 13, 34, -54, -19, 
  2, 11, 32, 27, 26, -3, -4, -1, 5, 10, 12, 14, 8, 4, 0, 3, -1, -16, -50, -34, -18, -13, 12, -17, -4, -16, -14, 10, 2, -8, 9, 8, -21, -14, -3, 15, 11, -6, -11, -4, -14, -10, -16, -5, -13, -10, 6, 1, 9, -2, 8, 17, 16, -29, -5, -26, -9, -23, -2, 15, -21, 11, 12, 5, 8, 14, 18, 26, 2, -20, -13, -19, 9, -18, -9, 14, -28, 23, 15, 5, -1, 1, 14, 3, -10, -26, -5, -33, -40, -34, -9, 23, -23, 37, 0, -5, -7, -5, 16, 7, -8, 0, -30, -23, -23, -14, -10, 6, -15, -8, -12, -10, 4, -12, -44, -33, -25, -29, -35, -3, 2, -4, 12, -3, -21, -23, -7, 8, 4, 17, -26, -11, 4, -23, -28, -19, -2, -20, 12, 23, -3, 19, 23, 19, 10, 14, 4, 12, 8, -18, -6, -3, -14, -24, -14, 8, -15, 11, 6, -10, -10, 18, -16, 5, -20, -8, -13, 0, -24, -13, -9, -12, 7, -1, -5, -3, 6, -12, 33, -6, -7, -20, -45, -1, -24, -25, -25, 7, -6, 8, 14, 10, 9, 6, -1, 19, -9, -20, -25, -16, -30, -19, -19, -6, 20, 28, -6, -1, -2, 7, -6, 11, 2, -8, 1, -16, -21, -21, 0, 7, -20, 17, -2, -26, 16, 18, 37, 17, 23, 18, 10, 1, -16, 19, -7, 11, 8, -2, 9, 7, 14, -15, 22, 33, 6, -13, -3, -15, -15, -18, -33, 19, 0, 1, 32, 3, 1, -16, 11, 7, 13, 9, -7, -5, -25, -18, -1, 3, -9, -10, 4, -3, 0, -15, -34, 9, -14, -9, -35, -15, -37, -1, -42, -8, -25, -14, -6, -13, -3, 8, 23, 7, 14, 5, -5, -16, 0, -4, -3, 13, -27, -7, -11, 0, 24, 1, 42, 26, 40, -10, -13, -24, -13, -26, -20, -12, 7, 2, -13, -22, 17, -6, 18, 22, 29, 30, 7, 16, -18, -6, -20, 43, -17, -9, 19, 4, 0, -1, 30, 44, 8, -28, -21, -11, -20, -16, -8, -11, 5, -8, 26, 23, 1, -4, -30, 9, 42, 6, 13, 4, 7, 22, -15, 5, 3, -8, -2, 11, -1, 48, 43, 47, 45, -7, -17, -21, 9, 8, 1, 11, -16, -1, -16, -12, 21, 11, 11, 38, 45, -15, -2, -23, -23, -24, -27, 22, 0, 11, -3, -5, 2, 6, 37, 19, 30, 18, 6, 9, -6, -6, -9, 36, -8, -13, 1, 6, 13, -6, -8, 7, 30, 12, 2, -14, -13, -8, -6, 10, -13, -2, -15, -10, 3, 22, 76, 58, 49, 0, -3, -10, 2, -10, -6, 23, 7, 15, -21, -13, 10, -13, 44, 12, 13, 5, -9, 1, -7, -20, 9, -27, 2, -5, 9, -8, 22, 24, 0, -8, 14, 7, -9, -10, 3, -16, -7, 7, -30, 29, -7, 2, 18, 35, 32, 24, 26, -20, -13, -59, -19, -22, -14, 40, -18, 29, -10, -24, 38, 17, 20, 41, 48, -10, 1, -18, 1, 5, -8, 64, -8, 26, -6, -5, 33, -19, -24, 1, -5, -1, -13, -11, 2, -11, -6, -7, 8, 22, 11, 19, 15, -10, -3, -8, 17, 7, -3, -8, -16, 0, -6, 10, -6, -7, 38, 32, 7, 18, -15, -10, 12, -15, -8, -3, -10, -4, -2, 33, 6, 2, 14, 12, 16, 21, 27, 23, -2, 2, 17, 15, -19, -1, -17, 25, -3, 21, 20, 10, 18, 53, 11, 13, 35, -17, 4, -9, -24, -11, -14, 26, -2, 30, 0, 4, 5, 3, 3, 7, -9, 1, 2, -3, -26, 0, -9, -25, 33, 13, -4, -5, -27, -9, -5, -11, -22, 22, 22, 7, -26, 3, -34, -43, -3, 6, -1, -22, -3, 37, 56, 26, 5, 27, 9, 32, -22, 26, -35, 32, 23, -23, -11, -19, 25, -15, 8, 20, 7, 48, 37, 21, -14, 11, -43, 25, 21, 6, -9, 3, -7, -3, 53, 34, 12, 8, 13, 5, -14, 3, -17, 32, -1, 0, 10, -7, -12, 10, 12, 4, 0, 18, 26, 2, -13, -7, -36, 10, 1, 5, -5, -6, 4, -10, 3, -6, -7, 29, 9, 29, -25, 13, -22, 2, 9, -19, -11, -1, 8, 14, -3, -1, -4, 12, -8, -6, 1, 0, 9, 20, -14, -8, 13, 9, 6, 26, 56, 30, 27, -19, -34, -16, -15, -13, -18, 12, -4, 3, -1, 8, 0, 27, 9, 26, 24, -13, 2, -10, -25, -17, -10, 20, -30, 30, 14, 8, -7, 19, -23, 21, 8, -18, -5, -3, 3, -5, -5, 20, -12, 16, -16, -5, 7, 43, 25, 20, 35, -8, -16, 2, -21, -5, -16, 30, -11, 20, 14, -5, 4, 68, 38, 64, 65, -14, -11, -11, -9, -29, -1, 59, -24, 54, -8, 3, 
  3, -3, -5, -5, 4, -9, -2, -9, -4, 2, -2, -6, -2, -11, -5, 2, 1, -2, 0, 1, 1, -6, -7, -1, 3, -3, 0, -4, -5, -2, 3, -6, -1, 1, 1, 3, -1, -2, 0, -6, 1, 3, 1, -6, -7, 3, 0, -8, -4, -3, -2, 0, -7, 4, -4, 3, -4, -5, -5, 0, 0, 7, -7, -6, 2, 3, -1, 3, 0, -8, 1, -8, 3, -2, -4, -6, -1, 3, 2, -8, 2, 2, -6, -1, -1, -6, 4, -6, -4, -2, -2, -7, -7, -2, -6, -4, -1, -5, -1, -4, 3, -6, -2, 3, 2, -4, -8, -8, -6, 8, 2, -3, 4, 0, -7, -6, 1, 2, 0, -4, -7, -6, 3, 0, -7, 1, -3, -8, 0, -7, -4, -3, -2, -5, 1, -3, -5, -2, 1, -2, -3, -6, -1, -5, -7, 2, -3, 0, -5, 2, -7, -10, 0, 0, 1, 0, -1, 8, 1, -3, -3, 1, -7, 0, -5, 3, -5, -4, 2, -1, -3, -7, 2, 1, -4, 0, 0, -3, 3, -1, 1, 1, -2, -13, -6, -1, -3, 2, -6, 4, -1, 3, 2, -4, 2, -1, 1, 0, 2, -4, -12, -3, -5, -2, 2, -1, -5, 3, -5, -2, -4, -4, -5, -2, -2, 3, -3, -5, 7, -7, 1, -1, -5, 5, -7, -1, -7, -6, -5, -4, -1, -5, 1, 4, 2, 2, 1, 2, 1, 2, 2, 8, -6, -6, 0, -6, -2, -3, 0, -6, 0, -4, -6, 2, -4, 0, 3, -3, 2, -5, 4, 0, -3, 3, -7, -2, -4, -5, -2, -10, 0, 3, -3, -6, -1, 0, -4, 0, -2, -6, 1, -4, -3, 0, 0, -1, -1, 0, -7, -3, -3, -1, -3, -2, -2, -1, 8, -7, 2, -3, 2, 0, -2, -6, -2, -5, 3, 1, 2, -5, -4, -4, -1, -6, -9, 6, 3, 2, -7, 1, 3, -3, -6, -4, 3, -1, -3, 0, -3, 1, -5, -2, 0, 0, -4, -7, -2, -1, -6, -6, -6, -2, 0, -6, -4, -3, -3, 0, 0, 11, -3, 2, -7, 0, 3, -4, -3, -4, -9, 0, 3, -3, 0, 4, 1, -6, -4, 3, -8, -7, 4, 3, -3, -3, -10, -4, 0, -3, 2, -2, -6, 0, -6, -1, 7, 1, 6, -1, 3, -2, 2, -10, 0, 0, -7, -7, 2, -5, -1, 2, 1, -1, -6, 2, 1, -9, -1, -10, -3, -5, -6, 1, -6, 1, -1, -6, -5, -1, -2, -6, -3, -2, -3, -5, 4, -6, -12, -8, -3, -3, 0, 2, -1, -6, -3, 1, -2, 4, -4, -5, 0, -3, -6, -4, -6, -3, -5, 0, -1, -8, -4, 2, -5, -4, -6, -2, 10, -7, -6, 2, -4, -9, 2, -3, -3, -4, 3, 3, 2, 4, -3, -9, 3, -4, 2, 3, -6, 3, 3, 2, -3, 1, -4, -1, -1, -1, -6, -6, 2, -3, -5, -5, -7, -2, -6, 4, 2, -6, 1, -3, -4, -3, -8, -3, -9, 2, 3, -5, -7, 1, -2, 0, 4, 4, 0, 0, -2, 2, -5, -8, -4, 1, -1, -5, -1, -2, 1, -4, 9, -7, 0, -7, 6, -1, -7, 0, -2, -2, 4, 2, -3, 1, 0, -4, 1, -6, 0, 4, -6, 0, -6, -4, 3, 5, -8, -2, -6, 3, -7, -3, 1, 1, -3, 2, 3, -10, -1, -9, 4, -9, 0, 3, -4, 1, -6, -5, -4, 0, -4, 1, -1, -3, -1, -8, -2, -3, -6, -7, 3, 2, -1, 2, -6, -1, -2, -4, -6, -5, -14, -10, -1, -11, -3, -7, -10, -2, -6, -1, 2, 0, 3, -4, 3, -7, 2, 4, 2, -7, -4, -7, -5, -4, 0, -1, -4, 0, 4, -6, -4, 7, 2, -1, -4, 0, 2, 0, -2, -9, 2, -2, 2, -3, -8, -1, -1, -9, 1, -7, -2, 1, -6, -5, -8, -1, 0, 1, -7, -1, -1, 0, -6, -3, -7, -8, -12, -6, -11, -6, -8, 4, -4, 2, -3, -5, 3, -5, 5, 1, -4, 3, -4, -6, -9, 2, -4, 0, -6, 2, -4, 2, -4, -3, -2, -3, 0, -2, 8, 1, 8, -1, -5, 2, 2, 5, -5, -5, 1, -5, -2, -8, -1, 4, -1, -3, -4, -4, -6, -2, -5, 1, -4, 0, 1, 0, 0, -6, -6, -4, -6, -3, 2, -3, -7, -6, -2, -5, 3, -4, 4, -7, -2, -1, 2, -5, 2, -7, 1, -5, -7, -6, -6, -3, -4, -5, -6, -6, -4, -4, -3, -2, -3, 4, -6, -6, 1, 1, 3, -5, 1, 0, -6, -5, 3, 3, -3, -15, 0, 4, -5, -3, -3, 5, -1, -1, -3, -3, 0, -1, -3, -7, -2, 5, -5, -7, -6, 3, 4, -1, -2, -3, 
  -19, -18, -60, -41, -47, 6, 17, 16, 4, 5, 8, -37, 9, -2, -7, -2, -4, 18, 38, 19, -1, 21, -2, 12, 21, 29, 9, -35, 18, -9, -26, -19, 14, 19, -8, -11, -15, 10, 21, 13, 47, 28, 42, -6, 15, 28, -7, -1, -19, 9, -25, -18, -19, 11, 4, 19, 20, 38, 18, -11, 38, 10, -9, -8, -3, 4, -25, -25, -6, 5, 14, 14, 7, 36, 38, -18, 7, -22, -31, -8, -9, -8, -48, -22, -15, -2, -1, 24, 37, 35, 30, -33, 14, -22, 10, 19, 9, 3, -39, -30, 9, -4, 17, 15, 38, 37, 26, -4, 40, 15, 25, 26, -8, 19, 37, 10, 16, 51, 61, 29, 14, 41, 8, 13, 52, 26, 8, -23, -17, -20, -11, -1, 0, 40, 23, 22, 19, 35, 13, -23, 9, -13, -29, -26, 0, 4, -10, -2, -3, 13, 7, 7, 21, 12, 30, -5, 28, -1, -6, 16, -2, -24, 10, -11, 12, 32, 10, 28, 43, 22, 14, 10, -18, -7, -13, 0, -23, 0, -36, -23, -1, -12, 15, -4, 34, 21, 40, -10, 4, 4, -26, -27, -1, 12, 10, -20, 11, -18, 9, 1, 29, 11, 29, 7, -19, -12, -3, 1, 18, 7, 12, 5, 7, 8, -4, 14, 11, 22, 1, 5, 7, 8, -1, 12, -18, -17, -40, -19, -21, -16, 4, -4, 15, -1, 22, -1, -6, 30, -7, -7, 4, 22, -24, -38, -8, -16, -11, 9, 9, 11, 24, 4, 10, 16, -25, -3, 10, 25, -21, -29, -32, 9, 14, 30, 11, 28, 8, -6, 19, 18, -3, 13, -2, -6, 17, -37, -25, 20, 57, 42, 34, 14, 31, -12, 34, 26, -11, 5, -4, 3, -31, -29, -32, -9, 2, 3, -1, -3, 11, -33, 11, 20, 15, -4, -27, -10, -30, -33, -47, 15, 10, 33, 20, 30, 19, 2, -31, 10, 6, 20, -25, -4, -29, -21, -24, -22, -11, -6, 19, 11, 20, -42, 27, 20, -16, -9, 1, 24, -35, -28, 5, 19, 12, 18, 18, 22, 17, 27, 5, 27, -29, -4, 0, 31, 56, -12, -37, 4, 3, 18, 11, 4, 24, 3, 6, 31, 14, -3, 13, -16, -64, -50, -44, 23, 20, 27, 11, 4, 9, -5, 39, 25, 4, 6, -24, 1, -13, -34, -40, 30, 25, 39, 5, 24, 25, -18, -1, 5, -14, -18, 2, 13, -32, -23, -29, -5, -10, 9, -6, 4, 7, -35, 27, 9, -7, -17, 5, 16, 8, -4, -31, -8, -1, 13, 15, 11, 31, 1, 19, 13, -5, 13, 0, -10, -74, -60, -45, 11, 19, 26, 29, 17, 13, -18, 23, -1, 20, 27, -16, 19, -51, -31, -11, 7, 6, 4, 14, 47, 13, 2, 5, 28, -14, -4, -19, -4, -16, -10, -17, -5, 27, 16, 17, 28, 41, -18, 34, -21, -5, -18, -3, -31, -21, -23, -7, 7, 7, 27, 35, 39, 27, -30, 23, -7, 15, 30, -23, 10, -27, -42, -50, 14, 11, 28, 19, -2, 27, -46, 31, 5, 21, 15, -18, 23, 37, 9, 17, 18, 19, 32, 28, 30, 12, 16, 15, 0, 3, -6, -27, 4, 4, 1, -20, 3, 26, 13, 26, 22, 17, -16, 23, 27, -35, -28, -2, 14, 7, 0, -5, 20, 30, 11, 4, 14, 11, -24, 12, 9, -14, -12, -4, -1, -9, -1, 13, 21, -7, -3, 10, 23, 24, -12, -9, 9, -22, -16, 3, -41, -9, -13, -18, 17, 7, 10, 19, 14, 22, -23, 3, -14, 0, 7, -2, -7, 12, 0, 11, -1, 8, 10, 39, 5, 45, 6, -4, 15, -12, -4, 14, 15, -11, 8, 25, -16, -27, 13, 23, 18, 36, 32, 10, 1, 9, 3, 2, -24, -53, -30, 0, 1, 15, -16, 42, -12, 44, -42, -4, 19, 6, 32, -21, 32, -14, -19, 5, -31, -10, -1, 17, 5, 46, -5, -26, 2, 9, -4, 12, 14, -26, -14, -12, -3, -10, -3, 26, 6, 6, -37, 6, 27, -14, 8, 11, -19, -43, -26, -11, 18, 15, 27, 28, 29, 52, -25, 42, 17, 3, 6, -14, -13, -7, -10, -6, 0, 6, 6, 23, 4, 38, -23, 4, 19, 3, 3, -24, -15, -13, -9, -14, -28, 3, 11, 14, 19, 13, -25, 4, 8, -20, -8, -6, -21, -55, -27, -39, -1, 17, 6, 21, 18, 3, -32, 20, 11, -3, -2, 5, -17, -22, -18, -20, 27, 3, 28, 29, 32, 18, -7, 47, -1, -3, -9, 15, -11, 19, -22, -11, -4, -29, 13, 18, 4, 31, -32, -18, 3, 12, -4, -13, -34, -29, -33, -36, 11, 15, -10, 30, 2, 28, -36, 38, -3, -12, 7, 1, -66, -56, -68, -57, 13, 26, -2, 15, 2, 25, -58, -4, -26, 12, -3, 
  3, -5, -7, 2, -1, -1, -11, -4, -9, -6, 4, 2, -7, -11, 3, 3, 3, 2, -8, -4, 3, 0, -5, 1, -6, -2, -8, -5, -8, 4, -6, 3, 0, -5, 0, -3, -4, -3, -1, -4, -6, 2, -1, -1, -5, -9, 1, -1, -5, -3, 2, -3, -6, 2, -8, 3, -2, -5, -4, -6, -8, -7, -4, -5, 2, 3, -3, -7, 0, -8, -5, -14, -9, -6, -4, -5, -3, 2, 2, -2, 3, -8, -5, -3, 2, 3, -1, 2, -4, 1, -1, -3, -5, -14, 3, -5, -1, -6, 0, -6, 2, -1, -1, 9, -10, -2, 14, 1, 0, 2, 1, -2, -5, -5, -2, -4, -5, -2, -5, 12, 11, 1, 1, -4, -6, 10, -3, -6, 1, -6, -2, 0, 2, 2, -2, 0, 1, 3, 0, 2, -3, 5, 2, -2, -3, -7, 1, 2, -3, -6, -7, -5, -4, -2, 3, -6, 2, -2, -3, -6, 2, -3, 3, -2, -2, 1, -2, -4, 2, -7, -2, -8, -4, 2, -5, 3, -2, 0, 6, -4, -7, -8, 0, -4, -5, 3, -5, -1, 2, -12, 3, -4, -7, -2, -7, -1, 3, -6, -6, 1, 0, -7, -2, -6, -3, -4, 0, 4, -2, -2, -7, 1, -3, -7, -5, -4, -7, -6, -2, 1, -6, -4, -3, -2, -5, 0, 2, -1, 2, -4, -5, -6, -1, -5, -7, -5, 3, -12, -6, -5, -1, -1, -5, 1, 1, -1, 2, -12, -2, -5, -1, -5, -1, 3, -6, 6, -1, -4, -5, -7, -7, 0, -2, -4, -4, 2, 0, -1, -2, -2, -7, 2, -5, -7, 1, -5, 0, 3, 2, -1, -1, -5, 0, 3, -7, -11, 3, 6, -2, -7, -4, 2, -5, -1, 1, -1, -6, 1, -2, -5, -4, 9, 1, -1, 1, 2, -3, -2, 2, -4, -5, -8, -2, 4, 2, -1, -5, -2, -3, 1, -3, -2, -6, -6, -1, 0, 3, 1, 0, 3, 1, -6, -7, -13, -3, 0, 2, -4, -6, -5, 3, -10, -3, -6, -15, 2, -7, -5, -6, 5, -4, -4, -1, -7, -5, -2, 3, -7, -1, -2, -5, -1, -6, -2, -7, -9, -7, -1, 0, 1, -5, 0, -2, -5, -1, -7, -4, -4, 6, -4, -2, -6, 3, -7, -7, -1, 1, -7, -1, -1, -2, -6, 1, 1, -5, -6, -2, -8, -5, -4, 2, -4, 2, 1, -8, 0, -2, -1, -5, -3, -3, -3, 1, 0, -6, 1, -3, -3, -4, 2, 0, -8, 4, -5, 1, 4, -1, -1, -7, -8, -2, 0, -6, -3, -7, 2, 1, -7, -5, -1, 4, 0, 4, 1, -1, -13, 0, -5, -1, -5, -7, -7, 2, -5, -4, -5, -4, 2, 3, -2, -5, -7, -7, 3, 2, -4, -4, -1, 3, 2, -3, 2, -2, -2, -5, 3, 1, -4, 0, 0, 2, -8, -5, -7, -1, 0, 0, -3, 3, -7, -6, -6, -6, 1, 1, 2, -2, -6, -1, 0, 2, -7, -4, -5, -4, -2, -5, 1, -1, -6, 1, -1, -6, 3, 2, -4, -1, -8, 3, 1, 1, 2, 6, -2, -5, 5, 2, -1, 1, -7, 0, 2, -6, -1, 2, 2, -5, -1, 0, 2, 2, -6, 4, -5, -5, -4, 2, -1, -4, 1, 1, 0, -1, -4, -2, -2, -6, -2, 3, -6, -2, -2, -4, -1, -6, -4, -1, -5, -1, -6, 2, 1, 1, 7, -6, -6, -5, -4, -2, -4, 0, -6, -4, 1, 1, 2, -5, -1, -3, -6, 1, -1, -1, -5, -6, -7, -1, -5, 3, -1, 3, -1, 1, 2, -4, -5, -4, -4, 4, 1, 2, 2, -3, -4, -8, -2, -1, 2, 0, 1, -7, -2, -6, -5, -6, 2, -4, 3, -1, -4, 0, 1, 0, 1, -1, -6, 1, 12, 1, -7, 0, -4, -3, 4, 1, -1, 0, -3, 0, -1, -2, -8, 1, -11, 2, -7, -4, -3, -2, -3, -5, 3, -3, -4, 2, -6, -3, -7, -3, -13, 1, 4, -4, -6, 0, -1, -8, 0, 3, 2, 4, 1, 8, -4, -2, 2, -5, 0, -2, -5, 3, -5, 0, -2, -5, -1, 3, 1, 2, -3, -1, 2, -4, 1, 2, 3, 1, -4, -7, -6, -6, 0, -3, 2, -2, 3, -5, 6, -3, -2, 0, -5, 3, -5, 1, 2, -8, 3, -4, 2, -6, -6, -1, -2, -6, -7, 1, -5, 4, -6, -5, -5, -4, 0, -2, -1, -3, -7, -2, -10, 2, -5, -7, -5, 2, -7, 2, 3, 1, 1, 1, -5, -4, -7, -4, 1, 2, -4, -6, -7, -5, 2, -5, -3, -5, -4, -3, 0, -5, -3, 0, -12, 4, -1, 3, -3, 1, 0, -6, -4, 1, -7, -2, 2, -3, -7, -15, 2, -4, -2, 
  -40, -51, 16, -15, 22, 10, 40, 14, 20, 19, 14, -15, 29, -24, 31, 55, -22, -45, -26, -21, 16, 11, 17, 11, -3, 11, 9, -37, 16, -24, -25, -64, -28, -50, 0, 3, -4, 16, -5, 31, -50, 20, -51, 5, 20, -3, -42, -52, -22, -29, -45, -31, -22, -8, 49, 0, 0, -26, -19, -18, -32, -9, -41, -19, -41, -36, -38, -36, -22, -43, -38, -15, 1, -14, -53, -34, -4, 19, -28, -24, -24, 29, 31, 13, 5, 31, 25, -4, -11, 9, -9, -4, 19, 19, -60, -48, 9, 26, 40, 42, 26, 47, -11, 24, -54, -19, -38, 41, -45, -26, -40, -33, 35, 36, 3, 7, -1, -22, -43, -19, 2, -48, -37, 31, -18, 19, -5, 5, 55, 24, 34, 21, 36, -29, 6, -35, -53, 49, -40, 72, -21, 14, -2, 8, 4, 39, 16, 36, 42, -10, 5, 22, -46, -43, -83, 10, -45, 10, -31, 19, 38, 42, 26, 14, -18, -18, 47, -17, 12, -36, 14, -16, 41, 9, -47, -41, -33, -25, -45, -40, -25, 62, 36, 65, -15, -7, -6, -6, 51, 5, -22, -47, -32, -7, -3, 9, -3, 39, -18, 44, -53, 41, -16, -11, 24, 18, -59, -50, -6, -55, -19, -7, -4, -23, -47, -33, -9, -40, 52, -5, -12, 12, 7, 18, -36, 10, 28, 12, -19, 48, 1, 17, 13, -29, 18, -31, 9, -24, -2, -29, -8, -25, -15, -2, -22, 45, 4, 19, 18, 17, 9, 25, -13, -3, -4, -38, 8, 7, -2, 3, 41, 5, -17, -1, 31, 24, 33, 12, 1, 25, -31, -8, 10, 8, 19, 8, 29, -29, -14, -31, -28, -3, -31, 16, -33, 12, -33, -30, 21, 38, 22, 36, 26, 19, 10, -4, 9, 8, -27, 80, 38, -21, -17, -14, 33, 50, 16, 49, 30, 19, 41, 2, -22, -27, -25, 33, 59, 35, -21, -27, 21, 31, 51, 15, 8, 24, 53, 4, -12, -33, 23, 37, 0, 18, -3, -25, -29, -30, -44, -25, -24, 2, 18, 21, -37, -39, -40, -20, -12, 2, -48, -60, -4, -40, -23, 7, 24, -24, -34, -22, -14, -17, -13, -14, -64, -23, -59, -55, -28, -10, 53, 23, 5, -45, -25, -12, 0, 20, 17, -9, -27, -23, -60, -16, -9, -31, 28, 5, -16, -44, -76, -11, -12, -36, -35, -26, 15, 0, -16, 11, -38, -64, -46, -42, -34, -67, -49, -57, 43, 1, 14, -64, -47, -32, -39, -27, -57, -58, -31, -32, -37, -59, -20, -32, -3, -36, -15, -65, 0, -10, -48, -33, -14, 2, -5, 38, 11, -7, -68, -62, -25, -60, -4, 20, -25, 10, -62, -41, -6, -23, 13, 6, 30, -21, -30, 8, 4, -46, -9, 8, -45, 6, -50, -46, -1, -3, 3, 0, 16, -31, -3, -43, -5, -11, -15, 15, -19, 3, -29, -24, 29, -9, 13, 15, 2, -45, -44, -16, 27, 12, -14, 42, -40, -16, -33, -30, -30, -71, 2, 3, 24, -50, -38, -29, -10, -20, -6, -15, -47, -23, -62, -62, -15, 27, -30, -40, -18, -75, -102, -67, -30, -50, -39, -30, -58, -1, -55, -55, -2, 5, -38, 0, 22, -27, -34, -42, -64, -33, -24, -4, -35, -11, -4, -43, -13, -3, 14, 20, -1, -35, -67, -43, -32, -58, -66, 11, -63, 18, -53, -29, -9, 21, 16, 38, 3, -52, -50, -32, 40, -8, 50, 38, -28, 17, -44, -53, -10, 1, -19, 23, 10, -18, -25, -28, 35, -77, -34, -2, 4, 0, -59, -71, -3, 26, 51, 38, 4, 9, -46, -13, -23, -7, -17, 17, -38, 4, -65, -49, 17, -61, 52, 35, 37, -5, 36, -36, 16, -2, 21, 2, -12, 6, -8, 4, -24, 13, 16, 20, 5, -13, 24, 8, -13, 40, -26, 32, -12, 2, 21, -22, 0, 25, 3, 38, -9, 10, -12, -24, -19, 13, -23, -1, 23, 11, -16, -6, 49, 40, 0, -34, 48, -35, 9, 9, 13, 24, 22, 65, -7, 4, -22, -24, 33, 23, 55, 36, 28, -19, -31, -43, 23, -22, -63, 25, -40, -6, -38, -32, 9, 65, 34, 37, 33, -1, 30, 18, 19, 58, 0, 29, 16, -2, -23, -43, 0, -16, 55, 21, 44, 46, 25, 21, -17, -43, -49, 26, 8, 48, -22, 10, -17, -29, -9, -14, 3, 16, 22, 22, 10, 13, 49, 2, -35, -30, -39, -49, -40, -46, -7, 5, -29, -18, -14, -27, 15, -30, -11, -48, -48, 2, -28, -58, -48, 2, -2, -7, -8, -11, 5, -3, 14, -1, -2, 1, -15, 14, -41, -48, -15, 2, 12, 64, 13, -72, -28, -7, -32, 11, 15, 6, -50, 48, -57, -58, 8, -102, -27, -73, -127, -4, -77, -11, -3, 5, -18, -10, 10, 17, -5, -29, 
  26, 30, 52, 54, 42, -24, -10, 3, 0, -2, 14, 25, -10, 21, 8, 6, 10, 30, 4, 6, 40, -13, 18, -49, 12, -12, 5, 40, -20, 22, -1, 3, 1, 19, 22, 45, 36, -14, -17, -33, 0, -13, -24, 68, -32, 35, -13, 12, -1, 34, 26, 34, 9, -35, 2, -46, -29, -36, -12, 39, -42, 53, 10, 7, -12, 4, -33, -11, 6, -25, -3, -34, -14, -34, 1, 22, -54, 47, -4, -2, -10, -3, 7, -10, -6, -2, -12, -45, -8, -28, 13, -1, -24, 33, -3, -16, -27, -15, -26, -17, -14, -8, -32, -40, -20, -33, -21, -1, -48, -21, -20, -22, 4, 28, -13, -20, -15, -31, -2, -20, 5, 2, 14, 25, -21, 2, 2, 12, 12, 24, 17, -10, 2, -29, -25, -7, -14, -1, -1, 51, -16, 40, 25, 1, -8, 19, -9, -1, -3, -67, -27, -30, -10, -12, -7, 11, -19, 27, 1, -11, -18, 4, 20, 9, -22, -38, 6, -12, -15, 1, 10, -23, -4, 7, -3, 0, 3, 4, -9, -39, -22, -16, -27, 0, -18, -18, -23, -13, -10, 20, 21, 19, -1, 27, 40, 28, 15, -6, -24, -14, -17, -13, -20, 29, 8, 29, -5, 13, 12, 30, 28, 24, 22, -17, -3, -33, -23, -7, -18, 33, -32, 3, 1, -14, 15, 23, 25, 14, -17, 9, -13, -27, -12, 2, -13, -15, -4, 11, 10, 12, -4, -3, -21, 1, -20, -45, -14, -40, -23, -30, -30, -18, -33, 13, 22, -2, -13, -8, 3, 12, -9, -4, -38, -36, -28, -23, -39, -3, -41, 30, 14, -10, -16, -16, -53, -29, -46, -2, -32, -34, -44, -18, -30, -27, -36, 9, 8, 7, -7, 16, -11, -9, -20, -7, -6, -23, 8, 8, 7, 15, -6, -4, -14, -5, 7, 9, 17, 13, -8, 4, -13, -25, -11, -20, -9, 8, -6, -19, 4, 3, 9, 3, -12, -7, -6, -8, -2, -15, 8, -15, 1, 19, 5, -11, 24, 31, -11, -14, -13, 3, 4, -47, -28, -20, -13, -25, -9, -21, 0, 8, 14, 19, -2, -15, -22, -11, 5, -20, 10, -15, 1, 10, -9, -15, -19, 6, -15, 1, -11, 34, 54, 43, 23, -24, -12, 1, 4, 5, 28, -6, -9, 8, -9, -3, 5, 7, -13, 26, 23, -2, -13, 3, 3, 5, -6, 12, 3, -4, 7, 10, 6, 13, 44, 24, 25, 3, -32, -3, 8, -8, 7, 35, -9, 16, 19, 12, 5, -27, -11, 5, -12, 8, 9, -17, 21, 10, 24, -26, -11, 5, 4, 2, -15, 4, 10, 18, 48, 1, 13, -22, 3, -3, -6, 42, -14, -11, -20, -8, 3, -15, 75, 46, -4, -24, -35, -21, -17, -29, 5, 5, -4, 0, 7, 6, 13, 3, -2, 5, -5, -3, -36, -28, -12, -16, -14, 18, -39, 27, 5, 1, -17, 18, 44, 19, 57, -6, -16, -24, -20, -19, -17, 34, -17, -12, -8, -15, 12, 14, 44, 64, 38, -5, 5, -37, 4, 5, -23, 28, -32, 16, -30, 13, 31, -36, -39, -37, -7, -21, -16, -25, 6, -15, -9, -5, -20, 24, 13, 18, 6, 5, 1, -20, -1, -12, -11, -19, -11, -9, -9, 6, -6, -9, 43, 19, -15, -5, -29, -32, -7, -8, -20, -10, 9, -11, 8, 20, -28, 11, -6, 12, -3, 14, 5, -4, -25, -38, -3, 3, -3, 1, -24, -23, -15, 16, 9, -1, 0, 44, 11, 3, -6, -31, 2, -8, 21, -5, 11, 2, -10, 36, 14, 19, 1, 20, -3, -10, -13, -15, -9, -15, -20, -5, -16, 9, 1, 28, -11, 9, -14, 0, 14, -4, -22, -8, -6, -16, -19, 12, -40, -10, -27, 11, -14, -2, -8, 22, 40, 18, 0, 7, -7, 8, 5, 0, -20, 10, -6, -23, -2, -19, 8, -28, -8, 0, 2, 30, -11, -26, 0, -2, -34, 12, 5, 13, -5, 2, -13, -39, 19, 31, -2, -6, -20, -19, -24, -23, -25, 6, -9, -15, 8, -5, -19, -1, 3, 17, -2, -15, 2, -35, -6, -16, -16, 12, -20, -1, -5, -12, 2, -4, -18, 13, 7, 6, -4, -8, -19, 20, -29, 5, -10, -16, -12, 1, 7, 40, 35, 25, 7, -3, -16, -32, 14, -1, 29, 19, -8, -1, 15, 11, 9, 26, 41, 14, 22, -29, -39, -20, 3, 3, -15, 28, -4, 20, -9, 8, -1, 39, 17, 7, 13, -40, -19, -38, 0, -15, 11, 28, -31, 38, -8, 3, -17, 12, 12, 19, -1, -27, -4, -22, -5, -3, -14, 31, -34, 35, -2, 7, -7, 48, 29, 21, 11, -21, -29, -40, -21, -21, -29, 30, -53, 19, 23, 7, -18, 34, 12, 13, 30, -31, -33, -22, -16, -25, 1, 26, -17, 39, 1, 13, 
  14, 26, 55, 25, 44, -8, -37, -8, 3, -2, -3, 29, -12, 30, -7, 2, -5, -19, -23, -7, -13, -17, 16, -25, -3, -9, -4, 2, 1, 11, 6, 11, -13, -10, -7, 0, 14, 10, -22, -15, -17, -21, -21, 2, -20, -4, 17, 12, 12, -3, 21, 10, 24, -15, -2, -4, 2, -21, -1, 9, -37, 11, 23, 15, 11, 9, 36, 30, 16, -17, -14, -9, -1, -29, -16, 31, -25, 34, 9, 3, 5, 18, 30, 26, 14, -7, -8, -18, -19, -38, -14, 34, -30, 38, 7, 4, -2, -5, 26, -1, -11, -4, -2, -11, -13, -7, 5, 2, -15, 8, -3, -4, 4, -34, -29, -31, -15, -28, -18, -7, 7, -12, 13, -19, -15, -8, 11, 21, 3, 9, -23, -3, 15, -29, -11, -20, 11, -25, 10, 27, -14, 22, 28, 11, 3, -9, 5, 9, 10, -14, -1, -22, -6, -11, -12, 9, -4, 19, -6, -10, -3, 18, -20, 0, -21, -13, -15, -6, -18, -11, -5, -19, 2, -3, 6, -2, 18, 17, 44, 9, -2, -16, -20, -9, -6, -11, -17, 16, 0, -2, 23, 36, 0, 1, -7, 6, -5, -6, -15, -17, -20, -12, -11, 1, 9, 27, -5, -11, -11, 7, -22, -3, -14, 2, 14, -16, 1, -7, 12, -7, 2, -4, -5, -11, 7, 12, 20, 23, 13, 18, -4, 15, -10, 5, -17, -3, 10, -16, 16, 25, 10, -4, 33, 35, 30, 6, 14, 1, 1, -11, -6, 8, 1, -9, 35, 8, 2, -18, 10, 4, 14, 1, 2, 2, -9, 2, 2, -14, 2, -5, 7, -2, -4, -13, -34, 13, -4, -16, -27, -32, -29, -11, -39, -6, -27, -15, 1, -8, 1, 11, 35, 23, 26, -1, 2, -6, 8, 8, 0, 15, -19, -9, -19, -2, 12, -10, 12, 22, 29, -3, 9, -3, -6, -7, -13, -2, 8, -2, -4, -16, 15, 0, 35, 19, 13, 2, 3, 2, -1, 1, -8, 21, -25, -7, 26, 14, 7, -5, 29, 30, 17, -30, -18, -11, -9, -16, 1, 4, 0, -14, 10, 14, 8, 5, -21, 10, 38, -1, 11, 3, 5, 7, -18, 5, 2, -17, -16, 10, -7, 25, 58, 38, 44, -11, -3, -13, 8, -2, -6, 17, -27, 1, -16, -10, -8, -8, -18, 16, 14, -8, -3, -13, 18, 3, -4, -9, 21, -6, 8, 1, -10, -17, -5, -9, 8, 25, 23, 2, 1, 15, -18, -1, 0, -13, 15, 26, -1, -21, -40, 0, 19, 32, 15, -2, -9, -12, -6, -13, 5, -1, -2, 2, -23, 9, 56, 50, 14, 16, 4, 3, 2, 4, 4, -18, 3, -8, -12, -3, 2, -17, 21, 6, -11, 1, -18, 2, 9, -17, 3, -20, -8, -18, 11, 5, 5, -3, -14, -14, -1, 2, -4, 0, -4, -12, -23, -6, 5, 10, 0, -6, -12, 33, 33, 20, 8, -8, 3, -27, -22, -2, -3, 23, -11, 25, -16, -15, 21, 4, 11, 20, 31, -4, 10, -9, 8, 17, -5, 41, -4, 17, -27, -2, 12, -29, -20, 4, -3, 4, 2, -11, 8, -8, 2, -21, 4, 17, 1, 14, 14, 16, 12, 13, 25, 8, -4, -12, -7, -6, 0, 11, -8, 7, 27, 15, 9, 10, 12, 12, 8, -5, -2, -3, -1, 3, -7, 29, 2, 4, 13, 19, 5, 2, -6, -5, -3, 4, 15, 6, -12, -17, -17, 4, 4, 23, 10, 9, -1, 21, 11, 8, 15, 3, -1, -1, -5, -6, 7, 11, -22, 20, -3, 8, -5, -3, -11, -12, -14, -2, 17, -5, 3, 11, -1, -26, 14, 10, 5, 1, -19, 13, -7, -12, -20, 5, 10, -8, -22, -5, -33, -31, -19, 1, -11, -9, 3, 29, 33, 30, 15, -3, 2, 4, -17, 7, -2, 31, -1, -3, -13, -24, 18, -17, 13, 21, 3, 13, 0, -5, -20, -3, -39, 6, 7, 16, -8, -11, -6, 3, 33, 21, 28, 17, 20, 2, -9, -7, 7, 30, -4, -1, 10, -9, -1, 30, 34, 14, 10, 2, -6, 6, -13, -12, -31, 20, -16, 18, -10, -14, 16, 14, 27, 20, 20, 15, 13, 13, -20, 1, -17, 22, 8, -8, -22, 3, 19, -2, 8, 7, 7, 3, -4, -15, 16, -7, 2, 16, -1, -8, 18, 12, 5, 0, 49, 31, 18, -8, -11, -19, -14, -15, -8, 3, -7, -12, 0, -2, 0, 20, 0, 20, 2, -23, -8, -22, -13, -14, -1, 4, -30, 7, -7, 16, -8, 29, -18, 4, 11, -12, 13, -4, -5, -11, -7, 8, -11, 20, -6, -3, 17, 45, 45, 27, 48, -14, -12, -18, -31, -6, -28, 39, -18, 22, 2, -6, 11, 60, 40, 78, 50, -4, 1, -3, 5, -21, -2, 51, 9, 50, -5, 16, 
  -13, 0, 3, 1, -2, -1, -7, -5, 0, -7, -7, -1, -8, 6, -8, -5, -3, -1, 0, 3, 6, -10, -5, -8, -10, 3, -9, -7, -6, -4, -10, -3, -6, 4, 2, 1, -1, -5, -13, 1, -4, -15, -7, -3, -6, -12, 2, -4, -8, -4, -3, -4, -2, -2, -8, -3, -10, -5, 0, 1, -6, -4, 2, -6, 2, -4, -8, -5, -9, 2, 7, 8, -4, -12, 4, -2, -9, -4, 1, -5, -5, -3, 1, -4, -4, -7, -1, -14, -16, 2, -3, -2, -4, -5, -6, 2, 0, -5, -6, 0, 0, 1, -9, -2, -4, 3, -1, 2, -3, -13, -2, -2, -4, -12, -3, 0, -6, 0, -4, -7, -4, 1, 4, -6, -6, -9, -5, 4, -4, 0, -11, -2, 1, -6, 1, -4, -8, 4, 2, -2, 3, -11, 4, 0, 0, -4, -2, 0, -2, 2, -2, 9, -4, 3, -5, -5, -2, -14, -1, 4, -10, -10, -2, 3, -1, 1, -4, -1, -4, 0, -7, -15, 0, -20, -7, 1, -1, -6, -4, -2, 3, -6, -7, 1, -6, 1, 1, -1, -8, -25, -5, -14, -10, -4, -2, 1, 1, -12, 4, -2, -10, -7, -13, -1, -9, -1, -8, -5, 4, -4, -4, -4, -5, -1, -1, -3, -8, 5, 3, 0, -3, -7, -6, -11, -3, 0, -1, -3, 5, 6, -14, -14, -8, -3, -6, -2, -4, -4, -5, -12, -7, -1, 3, -5, -2, -1, -3, -9, 5, -9, 8, 2, 2, 5, 6, -14, -6, -1, -2, 4, -8, -7, -9, -7, -6, -14, -6, -6, -7, -7, -5, -14, 2, 1, 0, -5, -2, -4, 3, 0, -7, 1, 1, 1, -2, -1, -3, -9, -8, -12, -13, -6, -1, 1, -2, 1, -4, -4, -3, 3, -12, 1, 5, 0, -11, -3, -3, 0, 1, -1, 5, -11, -14, -1, 2, -8, -8, -13, -3, -1, 2, 2, -5, -4, -6, -5, -1, -6, -1, -6, -4, 0, 1, -6, -3, -2, -3, -10, 0, -6, -8, -3, 6, -5, 0, 5, -4, 4, -2, -12, 5, -5, -3, 3, -1, 3, -2, -2, -2, -7, -9, 1, -7, -1, -8, -6, -3, 7, -4, -1, 2, 7, 0, 1, 5, -4, -4, -1, -5, -1, -4, -16, -1, 4, 5, -10, -7, -2, -16, -4, -4, 3, -3, -2, -5, -3, 1, -15, -3, 1, -4, 0, -14, -7, -14, -4, 6, 0, -8, 0, 1, -4, -5, -10, -3, -2, 2, -1, -1, 5, -2, 1, 1, -2, -2, -3, -7, -4, 0, -11, -6, -7, -3, 2, 6, -3, 0, 0, 3, 4, 1, 5, 2, 3, -7, -16, 1, 1, -4, -8, -4, -1, 2, -4, -2, -3, -1, -3, -2, -2, -3, -7, -14, -6, 2, -6, 3, 0, 0, -5, 3, -1, 2, 2, -5, -1, -8, -11, -10, -12, 8, -4, -6, -1, -3, 0, -9, -6, -7, 2, -14, 4, -5, -10, -13, -2, -1, 4, 5, 7, -6, -2, 3, 1, 3, 0, -2, -4, -9, -3, 2, -3, 5, -4, 1, -3, -1, 0, -4, -7, -7, 1, 6, 5, 1, -10, -13, -13, 0, -6, 2, -1, 1, 1, -5, 2, -4, 4, 0, 4, 3, -6, 6, -11, -12, -1, -1, 0, -2, 3, 4, -1, 1, -5, 0, 5, -4, -5, -5, -3, 1, -4, 5, -2, -3, -7, -4, 6, -3, -5, 3, 0, -11, -16, -2, 4, 4, 6, 0, 0, 6, -12, -12, -3, -6, -8, -18, -4, 3, -10, -2, 1, 2, 1, -1, -2, -4, -2, 0, -3, -5, -1, -3, -1, -5, -10, 6, -5, -3, 0, 0, -3, -2, -1, -3, -5, -5, 0, -4, -6, 1, -1, 2, 6, -2, 0, 0, 5, -3, 3, -1, -1, -6, 2, -7, 3, -4, 9, -3, -1, 1, -3, 2, -5, -1, 5, -2, 1, -9, -2, -4, 2, -6, 8, 0, 0, 2, 1, -3, 1, 3, 4, -9, -4, -17, -3, 0, -3, -13, -3, 0, -11, 0, -3, -1, -7, -1, 1, -3, 0, -18, -1, -9, 0, -10, -9, 1, 6, 0, 1, -5, 2, -5, -14, 2, -12, -4, -4, -2, -2, 3, 6, -3, -5, 0, 0, 3, -4, 0, 4, 1, -7, -5, 0, 2, -4, -6, -8, -3, 1, 3, 4, 0, 7, -2, 0, 1, 0, -3, -7, 1, 2, -13, -7, -2, 1, 4, 1, -5, -2, -2, -4, -5, 4, -14, -1, -5, -8, -19, 1, 3, -3, -7, 2, -2, 0, -2, -1, 9, -8, -10, -1, -5, 3, -13, -12, -2, -3, -8, 6, -3, -4, -3, -1, 5, -9, -5, 5, -5, -4, 5, -7, 5, -8, -7, 5, -1, 0, -5, -6, -2, 1, 3, 8, 1, 4, 2, -6, 5, -7, 
  -9, 3, -6, -4, -1, -4, -17, -5, -6, -10, -9, -7, -8, -13, 1, -1, 2, 0, -1, 0, -1, -3, -2, -6, -6, -5, -6, 2, 2, -4, -5, 4, 2, -3, 4, -6, 4, -6, -2, 2, -5, -3, -3, -5, -2, -15, 3, 2, -3, -6, -2, -2, 1, -5, -7, -4, 5, 3, -5, -5, -6, -16, 0, 1, -2, -2, 0, -1, -5, -1, -4, -12, -5, -5, -7, -4, -6, -5, 1, -4, -7, 2, -3, -4, 0, -5, -4, 0, 0, -5, -3, 1, 2, -15, -3, 4, 1, 3, 0, 3, -4, -3, 4, -1, 3, 2, -5, 3, 0, -11, 1, -4, -4, -7, -5, -7, -4, -2, -8, -4, -3, -7, 1, -7, 1, -15, -2, -6, -6, 2, 3, 1, -4, 2, -3, -2, -1, -5, -2, -1, -5, -12, 3, 0, -1, -5, 3, -4, 0, -2, -2, 0, -5, -1, -2, -4, -1, -14, -4, 3, -6, -1, -2, -3, -4, -6, -3, 2, -4, -3, 2, -5, -1, -10, -6, -1, -5, -5, -7, -3, -7, -5, 2, -7, 2, 1, 0, 1, -1, -4, -2, -1, -2, 4, 0, -2, 0, 1, -3, -2, -3, 2, -2, -3, 3, -9, 2, -4, -5, -3, 0, -6, 4, 3, 2, -5, -6, 4, -4, 3, -7, 0, -1, -1, 1, -6, -6, -1, -2, -6, -3, -3, -2, 2, -1, 1, -4, -5, -1, -1, 2, 4, -1, -5, -3, -3, -1, -2, -2, 3, -3, -7, -2, -10, 0, -5, 3, 0, -2, 0, 2, -6, -6, -5, 3, -1, -1, -2, -7, -12, -4, 3, -3, -7, 2, -7, -3, 1, 0, 2, 2, -5, 0, 0, -2, -7, -4, 1, 0, 2, -4, -5, -7, 3, 1, 0, -2, 2, -3, 1, -3, -5, 1, -4, 5, -6, 2, 3, -4, -7, -8, -3, -3, 0, -6, -7, -4, -4, 1, -4, 2, 1, -3, 1, -6, 3, 1, 2, 3, -4, -6, -5, 3, -7, 1, -3, 4, -2, -4, 0, -7, -6, -1, -3, -7, -2, 3, -6, -2, -13, -6, -2, -1, 1, -6, -6, -2, -1, 3, -5, 0, 0, 1, 0, -4, -1, 0, 4, -1, 2, 3, -5, -1, -7, -8, -12, -6, -6, -6, -1, -7, 3, -5, 1, -3, 1, 6, -1, 2, -6, 0, -7, -5, 5, 0, 2, 1, 2, -3, -6, 3, -7, -7, -5, 3, -7, -4, 1, 1, 3, 3, 0, 0, -13, 3, -3, 3, -2, -2, -1, 2, -7, -4, -4, -5, 7, -6, -5, 3, -1, -5, -5, -3, 3, 1, -4, 0, 4, -5, 1, 4, -3, 3, -7, -5, -2, -3, 4, -1, 0, 0, -4, 3, -1, -2, -5, 4, 2, 3, -5, 1, -7, -5, -3, -1, -8, 2, -1, 1, -3, 2, -5, 0, -6, -7, -2, -7, -2, -2, -4, 2, -4, -5, -6, -1, 0, 0, -2, -7, -4, 4, 3, 3, -2, -3, -1, 3, -4, 7, -4, -5, -1, -4, 7, 1, -5, -2, 3, -7, -9, -6, 3, -2, -1, 3, -6, -1, 2, -4, -2, -3, 1, 0, -1, 5, -15, 5, -2, -7, 1, -2, 1, 1, 2, 2, 5, -7, 3, -1, -6, 2, 1, -3, 0, -7, 1, 2, 3, -6, -5, 1, -4, -3, 3, -4, 1, -7, -15, 3, 2, 3, -2, 4, 0, -4, -2, 2, 0, -1, -4, 0, 2, 3, -13, -6, 3, 2, -7, 3, -1, -5, 2, -6, -1, -4, -5, 0, 0, 3, -10, 2, 4, -6, -3, -6, 4, 5, 6, -9, -5, 1, 0, -3, -3, -7, -7, -7, 2, 3, -4, 2, 1, -6, 2, -15, -3, -8, -3, -4, -5, -6, 0, 0, 0, 0, -5, 0, 1, 0, -8, -16, -5, 3, -6, -5, -2, -3, -3, -7, 0, 2, -3, -6, 3, -6, -4, -2, -15, -2, -11, -6, 3, -3, -12, 2, -5, -3, 0, -5, -3, 0, -2, -3, -5, -6, -1, -3, -6, 2, -3, -2, -4, -4, -3, -1, -1, 0, 4, 3, -7, -6, -7, -7, -6, 2, -6, -3, -4, 4, -5, 8, 2, -2, -2, -2, -2, -6, -5, 1, -4, 3, 0, -3, 5, 0, -2, -8, 1, 0, 3, -5, 1, 2, -5, 0, -1, 4, -13, -2, -4, 7, 0, -1, -3, -1, -5, -4, 2, -7, -8, 3, -6, -7, -17, -4, 1, 2, -2, -5, 3, -4, -2, 2, -6, 1, -5, 3, -4, -2, -10, -6, 1, -6, -5, 4, -4, -7, 1, -2, -2, -4, 0, 0, -3, -4, -8, -7, -7, -7, 2, -1, 0, 3, 1, 4, 4, -6, 1, 5, -1, 3, -7, -6, -7, -3, 1, -7, 1, 2, -3, -2, -4, 1, -3, -8, -1, -5, -11, -2, -4, 
  -7, -9, -1, -3, -2, -8, -9, -5, -2, 3, -5, -7, -4, -5, 8, -1, -8, 1, 5, -9, -3, 1, 2, -6, 3, 3, -3, -7, -5, -13, -7, -5, -7, -11, 7, -1, -8, -1, 2, -4, 2, 3, -7, -8, 2, -6, -2, 3, -5, -10, 6, -3, -2, 2, -2, -3, 0, 2, -6, 5, 5, -10, 1, -3, -9, -9, 2, -6, -6, -5, 1, 2, 5, 2, 0, 4, 0, -11, -7, -7, -14, -3, -5, -4, -10, -2, -1, -1, -1, -5, 3, 4, 1, -5, 1, -3, -14, -7, 3, 1, -8, -6, -1, -7, 3, 1, -8, -3, 3, -17, 1, 0, -14, -5, -4, -2, -4, -3, -5, -2, 2, -10, -5, 2, -3, -5, -5, 3, -3, -10, 0, 0, -5, 4, -2, 5, -7, -1, -7, -9, 5, -13, -1, -4, -14, -3, 4, -13, 0, -6, -5, -6, -9, -1, -2, -6, 2, -11, -7, -2, -10, -4, -1, -4, -10, 0, -5, -1, -4, -2, -3, -2, 3, -3, -1, -2, -12, -8, 3, -8, -8, 0, 1, -4, 1, 3, -2, -6, 0, -8, -2, -1, -13, -8, 2, -4, -10, -6, 2, -8, -7, -3, -2, 0, 2, -8, -4, -4, -11, -6, 1, -8, -2, 1, -3, -1, -4, 0, -5, -4, 0, -4, -2, -7, -1, -8, 2, -7, -1, -5, -5, 4, 1, 3, -5, 0, -4, -12, 2, -1, -10, -4, 2, -5, -2, -6, -3, -6, -3, -9, -2, -7, 2, -6, -4, -5, -3, -3, -2, -8, -5, 3, -4, 1, -2, 3, 5, -3, 4, -5, -5, -1, -17, -5, 6, 1, 1, 4, -7, -8, -5, 0, -1, -5, 0, -15, -6, 3, -11, -2, 2, -4, -5, 2, 2, 1, 0, 0, 2, 2, 0, -8, 3, -5, -8, -1, 3, -1, -8, -5, -4, -7, -2, 3, -3, -6, -1, -8, -8, -3, -7, -4, 0, -6, -8, -2, -1, 3, -6, 2, -1, 3, 3, -7, -2, -1, -7, 0, 4, -2, -12, 2, -7, 0, -8, -3, 0, -1, -7, -3, 1, 5, -5, 0, -2, -4, -7, 0, -6, -5, -4, -7, -3, -10, -1, -5, -8, 4, -9, -9, 7, 0, -12, 3, -7, 2, -5, 5, -6, -4, -3, -7, -1, -8, -9, -8, -5, -9, -6, -3, -5, -8, 3, -2, 0, -4, -5, -9, 0, -5, -7, 0, 1, -6, -10, -2, 2, -1, 7, -5, 6, -6, 8, -2, -6, -7, -5, 1, 3, -5, -4, 0, -2, 1, -4, -6, -9, -2, -4, -2, -2, 0, -13, -8, -5, -1, -2, -6, -1, -2, 1, 1, -2, -5, -1, -5, 1, -6, -11, -8, 4, -7, 0, -1, 1, 4, 0, -6, -3, -1, -5, -2, -5, -3, -5, -7, 1, 1, -3, 1, -2, -3, 2, 0, -1, 2, -1, -11, -1, 3, -7, -6, 3, -9, -7, 2, 2, 3, -2, 2, -7, -7, 2, -6, -5, -4, -15, 2, -1, -4, -2, -4, -1, -1, -1, 1, -5, 0, -5, -3, 2, -4, -9, 1, 6, -3, -7, 2, 0, -4, -1, -4, 0, 1, 3, -8, 0, 0, -2, 1, 4, 0, -4, 5, 0, -5, 0, -2, -1, -1, -3, -4, -4, 7, -12, -4, 3, -3, -1, -4, 6, -7, -2, 3, 0, -10, 6, -11, -2, 4, -4, -8, -2, -2, -2, 0, -3, -4, 2, 2, -5, -2, 5, -3, -3, 3, -2, -3, 4, -8, -5, 2, -4, 4, 1, -5, -7, -5, -4, -5, 0, -7, -10, -3, 6, -3, -8, 0, -6, -6, -5, -5, -2, 4, -5, -8, -7, 2, 0, 1, -3, -6, 0, -7, -8, -5, -1, -2, -6, -7, -4, -6, -7, 1, -5, -6, 5, -5, -6, -7, 0, -7, 0, 1, -7, -4, -1, -1, 5, 2, -5, 4, -6, -5, -9, -8, -5, -7, 1, 2, -4, -2, -6, -3, -7, -5, -6, 2, 4, -9, -6, -3, 1, -5, -4, 0, -3, 1, 0, -2, -7, -6, -6, -9, 5, 2, -3, -2, 0, -3, -5, 2, -3, -1, -4, -5, 2, 2, -6, -8, -6, -4, -1, -9, 3, -1, -4, 4, 3, -3, 5, -7, 4, -3, -5, -9, 1, -2, -1, -6, 4, 2, -4, 3, -4, 1, 3, 1, 2, -1, -5, -2, 0, -1, -8, -1, 1, -7, -3, 4, -7, -4, 1, -9, -11, -8, -7, -3, 4, -12, -1, -8, -1, 1, -11, -6, 0, -3, 2, 0, -2, 1, -4, -6, -3, -10, -1, 2, -9, -2, -1, -2, -9, -4, -3, -10, -8, -4, -2, -5, 8, 2, -11, 3, 5, -3, -2, 1, -4, -4, 2, -7, -7, 6, -6, -1, -3, -6, -2, 1, -6, -3, -11, 1, -4, -9, -7, -1, -6, -11, 
  -8, 13, -1, 8, -13, -21, -22, -53, -33, -19, -54, 8, -23, -1, 2, 12, -15, 19, 14, 22, 13, -17, 19, -29, -8, -7, 4, 24, -6, 1, 20, 34, -4, -4, 19, 25, 8, -26, 3, -53, 5, -12, 1, 13, -39, 17, 27, 38, 4, 32, 10, 18, 15, -31, 19, -63, -13, -17, 16, 19, -30, 12, 33, 45, 1, 20, 18, 50, 24, -4, 31, -27, 12, -2, 7, 31, -13, 16, 27, 24, -8, -39, -5, -4, -25, -9, -1, -30, -2, -8, -4, -10, -10, -16, 17, 22, -33, -36, -34, -26, -21, 1, 9, -51, 16, -1, 8, -25, -18, -45, 16, 27, 32, 4, -14, -15, -10, -22, -18, -12, 36, -3, 30, 9, -11, -39, 37, 45, 10, 18, -8, 8, -3, -45, -26, -24, 6, -17, -1, 14, -17, 4, 47, 45, -20, -25, -21, -38, -13, -33, 38, -4, 8, 6, 13, 0, 24, -7, 35, 8, -43, -17, -16, -43, -29, 12, -19, 0, 20, 19, 1, -30, 16, -28, 22, 17, 6, -27, -31, -51, -36, -23, -22, -31, 23, -6, -7, -52, -13, -33, 0, 24, -15, -21, -18, -27, -33, -4, 20, -4, 20, 17, 14, -35, -2, -53, 9, 33, 14, -18, -26, -7, -7, 8, 2, -20, -2, 11, 5, -3, -9, -45, 26, 18, 11, -14, -13, -9, -26, -24, -15, -22, 16, 17, 0, -26, 5, -39, 27, 29, -7, -35, -37, -29, -32, -26, 26, -61, -13, -5, -22, -31, -62, -29, 41, 24, 2, -8, 36, 2, -6, -24, -19, -41, -38, -26, -46, -18, -30, 16, 26, 4, 13, 12, -8, 16, 19, 11, -21, -40, -39, -22, -40, 48, -57, 17, 34, 9, 26, 13, 44, 25, 8, -14, -23, -20, 0, 6, -17, 44, -12, 8, 13, 21, 34, -12, 11, 7, 6, -1, -22, -42, -15, -3, 12, -19, -17, -29, 10, 11, 18, -29, -6, 3, -24, -21, -7, -35, -7, -11, -4, 5, -48, 10, 46, 29, -13, -43, -8, -18, -22, -47, 5, -23, -4, -1, 10, -47, 13, -15, 21, 29, 12, -16, -28, -9, -7, -15, -17, -22, -15, 0, -32, 19, 13, -22, 15, 36, 4, -20, 31, 18, -1, -16, 0, -33, -32, -2, -24, -19, -29, -7, 16, 16, -12, -22, -17, -5, -2, -6, 31, -18, 2, -3, -17, -3, -24, -51, 2, 39, -2, -11, -27, -30, -20, -15, -20, -11, -4, -17, 12, -29, -33, -18, 22, 49, 13, -12, 3, -11, -11, 1, -13, -13, 3, -12, -8, -24, -32, -21, 5, 20, -18, -27, 12, -4, -20, -19, 12, -54, -12, 5, -14, -19, -2, -14, 0, 10, -9, -32, -17, -25, -26, -22, 3, -50, -30, -22, -29, -21, -24, -17, 28, 23, -9, 5, 28, 12, -8, 7, -29, -33, -9, -43, -39, 6, -53, -40, 22, 49, -33, 46, 19, 34, 36, 4, 3, -8, -13, -14, 20, 48, -10, 14, 1, 0, 3, -15, 19, 41, -3, 8, 28, -24, -1, -10, 3, 18, 16, 32, 14, 8, 50, 10, 3, 14, -3, 15, -3, -13, -1, 4, 20, 4, -11, 10, 23, 35, -1, 27, 39, 5, 5, 19, 10, -20, 17, -1, 28, 0, -3, 28, 39, 40, -20, -18, -11, -43, 4, 13, 7, -3, 29, 31, 20, 4, -14, -11, 1, 30, 5, 8, 65, 20, 10, -18, 50, -14, 0, 6, -15, 15, -5, -4, 47, 32, -8, 16, 28, 16, 32, -13, -9, -5, -2, 19, -14, 49, -18, 11, 8, 22, -3, -14, -18, -23, -29, -21, 0, -23, -5, 1, -3, -23, -10, 15, 29, 20, -6, -33, -18, -41, -28, -28, -23, -34, -13, 3, -48, -47, -21, -40, -13, 14, -5, -6, -25, -14, -25, 10, -3, 15, -12, 17, 16, 10, -12, -28, -9, -20, 15, -31, -29, -28, -37, -13, -24, -41, -29, -19, -28, -24, -52, -30, 6, 22, -11, -6, -22, -7, -12, -44, -2, -47, -25, -20, -14, -4, 1, -27, 21, 13, -12, -56, -13, -5, -1, -24, -20, -33, -3, -10, -33, -17, -32, -23, 18, 17, 18, -12, -8, -9, 2, -4, 2, -52, -35, 2, -30, -4, -39, -35, 4, 30, -5, 32, 79, 77, 4, -4, -20, -35, -5, 34, 16, -7, -8, -13, 12, 12, 7, -28, -2, -35, -11, 3, 16, -22, 2, 2, -19, -21, 10, -8, 4, 25, -7, -10, 12, -18, -4, -18, 1, -7, 3, -1, 3, 8, -15, -11, 11, 29, -20, 61, 17, -9, 9, -37, 5, -41, -25, 15, -27, 42, -41, -11, 7, 32, 4, -1, 12, 24, -17, -23, 8, -43, -3, -14, -26, 5, -53, 0, 23, 32, -1, -4, -27, -22, -21, -30, 18, -18, 0, 3, 8, 4, -3, -14, 26, 40, 
  -1, 7, -2, -3, 5, -13, -9, -1, 4, -4, -12, 0, -4, 1, 16, -9, -15, 0, 2, -4, 1, -18, 0, -12, 1, -6, 5, 4, -10, -2, -6, -7, -16, -4, -1, 0, 0, -6, -9, 4, -10, -8, -13, 1, -7, -16, -8, -13, -17, 1, 1, 3, 4, 8, -9, 1, -18, -1, 12, -3, -13, 3, -13, -16, -8, -11, -7, -2, 2, -5, -6, -3, -5, -4, 17, 3, -17, -6, -8, -1, -10, -5, -8, 7, -5, -14, -10, -14, -11, -2, -5, 3, -1, -8, -15, -17, -9, -7, 12, -3, -1, -1, 2, -5, 20, -4, 22, -1, -1, -6, -8, 9, -9, -1, 0, -3, 3, -3, -11, 2, 18, -6, 7, 2, -5, -10, -9, -11, -11, 2, 6, -3, 1, -9, 14, 2, 9, -5, 3, -1, -10, -6, -1, -2, -15, -4, -2, -4, -2, -2, -8, -8, 22, 6, 17, -8, -8, -2, -14, 5, -17, -11, -11, -4, -6, -12, -5, -11, -13, 5, 3, -9, -11, 2, -7, -6, 10, 2, -11, -2, 3, -8, -3, -6, -2, 1, 6, -5, -7, -5, -6, -5, -2, -5, -7, -6, 0, -8, -4, -15, -4, -2, 0, -6, -4, 6, -3, 2, -10, -4, -6, 0, -3, 4, -9, 13, -4, 1, 6, 2, 19, -20, 4, 10, -3, 0, -6, 4, 3, -4, -9, -3, 5, 14, 3, -7, -13, -14, -3, -8, -10, 1, -2, -4, -2, 5, 1, -8, -5, -4, -14, -2, -2, -21, -4, -6, -16, 11, 2, -4, 4, -2, -4, 6, -9, -4, -13, -1, -6, 10, 0, -12, -5, 2, -4, 4, 1, 15, 11, 4, 5, -3, -3, -2, -4, -7, -10, -8, -6, -5, -2, -1, -6, -4, 1, 1, 5, -6, 0, -15, 9, -17, -15, 0, -10, -7, -9, -6, 3, 2, -3, 0, 6, 0, 13, -2, -7, -17, -14, -1, -6, -3, -2, -1, 6, -7, -8, -5, 1, -3, -2, 1, -9, -5, 4, 1, -5, -6, -7, -1, -3, -10, -5, -12, -16, -2, -4, 0, -4, -16, 2, -15, -10, 3, 0, 3, 0, -10, -17, -7, -12, -10, -5, -9, 1, -17, 4, -10, -3, -7, 6, -3, 7, -18, -16, -3, -7, -15, 11, -1, -6, -17, 2, -2, -7, -4, -4, 2, -4, -9, -21, -5, 6, -5, -14, -7, -16, -8, -1, -5, -1, 3, -8, 0, -5, -4, 7, -4, -8, -12, -4, 1, -6, -21, 7, 7, -10, -2, -6, -16, -1, -10, -20, -6, -11, -7, -2, 3, -14, 14, -4, 4, -3, -3, -7, -6, 3, -13, -4, -19, -4, -10, 11, -5, -10, -13, 0, 25, 4, -2, 3, -10, 3, -15, -16, -3, -2, -10, -16, 3, -12, -14, -3, -5, 1, 1, 6, -7, -7, -7, -3, -11, -11, -8, -14, -3, -12, -14, -2, -2, -3, 3, -7, -1, -1, -20, -4, -3, -13, -15, 1, -6, -14, -14, -6, 2, -3, -12, -12, -5, -10, -3, -13, -6, -6, -1, -10, 6, -2, -19, -7, 0, -13, -5, -11, -17, -7, -7, -12, 6, 12, -3, 9, -13, -3, -8, -2, -1, -6, -9, -10, -14, 0, 2, -8, -14, 7, -11, -6, -1, -13, -8, -6, 1, -1, 2, -16, -10, -4, -12, -10, -12, -7, -10, -6, 5, -5, -8, -1, 0, -5, 3, -14, -7, 3, 5, -6, -10, -2, -10, -2, 3, -6, -7, -6, -8, -1, -4, -14, 3, 2, -5, -10, 6, 0, -2, 0, 2, -10, -16, -7, -5, 3, -5, -10, -6, -2, 0, -16, -10, 2, -4, -4, -2, -15, 0, -1, -3, 3, 5, -2, -7, 4, -6, -5, -14, 0, -13, 2, 3, -6, -20, 5, 4, 0, -6, 3, -11, 2, -3, -11, -9, -1, 1, -2, -4, 4, 10, 0, 0, 3, 3, -9, 3, -2, -14, -4, -6, -1, -14, 2, -5, 1, -16, 2, -4, 0, -3, -5, -6, -2, -19, -8, 4, 0, 2, 6, -2, -13, -15, -6, -13, 4, 1, -2, -5, 1, -4, -7, -5, -4, 3, 12, -1, -2, -13, -4, -7, 8, -6, 3, 0, 0, -3, -6, -9, 7, 4, 4, -3, 5, -14, 2, -2, 3, 3, 1, 0, -5, -6, -7, -1, 5, -3, -2, -2, -1, -21, -2, 2, -3, 5, -1, 2, 0, -9, -19, -12, 0, -7, 11, 4, 5, -20, 8, 1, -3, 3, 0, 6, -5, -4, 7, 1, 8, 7, 21, 3, -2, 9, 2, 1, 1, 4, 3, 3, 4, -7, -6, -2, 5, -2, 1, -4, -11, -10, 11, 4, 11, -2, -3, 3, -7, 4, -10, -7, 10, 2, -4, 1, 4, 13, -5, 6, 6, 2, 1, -4, -5, -15, 5, -10, 9, 7, 5, -7, -20, -9, 15, 6, 
  0, -2, 6, 1, -7, -6, -9, -13, 1, -1, -8, -4, -13, 8, -1, -5, -5, 2, -2, -1, -7, -4, -3, 3, -2, 0, -8, -1, 3, 12, -4, 2, -3, -1, -3, 0, -15, 4, -2, 0, -7, -1, 1, -2, -5, -5, 0, 0, -7, -12, -4, -3, -4, -10, -2, -1, -2, 1, -6, -8, 4, 0, -5, -3, -1, -2, -1, -3, -1, -6, 3, -1, 2, 5, 3, 2, -8, -4, -1, -1, -1, 0, 3, -2, 4, -7, -3, 13, 2, -9, 4, -6, -9, -8, 0, -4, 5, 1, 2, 1, -4, 2, -6, 4, 6, 5, 3, -6, 2, -12, -3, -1, 2, -6, 3, 0, 4, -3, -6, 6, 6, -3, -2, 2, -5, 0, 0, -7, -6, -2, -7, -8, -2, 0, -8, 8, 16, 3, -1, 1, 6, -4, 2, 3, 4, -7, -2, 0, -3, 9, -3, -6, 5, 3, -2, -2, -2, 3, -5, -4, 1, -4, -1, -6, 2, -2, -6, -6, -2, -4, 1, 0, -4, -9, -4, -6, -3, -4, 6, 2, 0, -2, -2, -3, -2, -4, -3, 2, -4, -4, -4, -5, -10, -4, -1, 2, -8, 0, -4, -4, -1, -4, -2, -4, -6, -1, -1, -6, 2, -6, -1, -3, -2, -1, -2, 3, 10, -1, -2, -8, 11, -8, -7, -2, -5, -4, -2, -4, -2, 6, -9, -7, -2, -7, -4, -6, -6, 1, 3, -7, -5, -1, -3, 2, -6, -4, -2, -9, -2, -3, -14, -1, -10, 3, 6, -12, -3, -4, 0, -3, 2, 12, 5, -7, 1, -4, -5, -4, 0, -1, -1, 5, -10, -6, -7, -7, -5, -1, 7, -4, 1, 4, 7, -8, 4, 12, 6, -7, -1, -4, -2, -4, -6, -9, -2, 1, -8, 2, -12, 11, -3, 1, -4, 4, -1, -1, 4, 0, -7, -6, 5, -13, -13, -3, 0, -6, 3, -2, 7, -2, 4, -5, -7, -5, 0, -2, -13, -11, -3, -13, -6, -6, -8, 13, 2, -4, -6, -2, -2, 2, -4, -1, -12, -2, -10, -4, 3, 1, -7, -2, 3, 7, -1, -6, -6, 4, 1, -1, -7, -4, -5, -7, -9, 2, -7, 8, -5, 0, -4, -6, -6, -8, 8, -1, -11, 1, -9, -11, 2, -5, -3, 2, -6, -2, 7, 1, -3, 0, 2, -1, -5, -11, -10, -8, -5, 3, -5, 8, 9, 2, 2, -6, 0, -5, -4, -5, -6, 3, 8, 0, -1, 1, -8, -3, 3, 14, -1, -4, -2, -4, -2, 4, -4, -7, 1, -6, 1, -2, -6, -7, -1, -8, -4, 4, 2, 2, 2, 4, -4, 4, 2, -10, -6, -1, -6, -1, 0, 5, -7, -7, -3, 6, 5, 5, 4, 0, 1, 14, 3, -3, 1, 6, -7, 5, -11, -4, -8, -11, -6, -3, -1, 0, -2, 3, 0, -3, -6, -9, -5, -6, -2, -6, 3, -6, 5, -8, 0, -3, -7, -4, -5, -6, -5, 3, 0, -4, -5, -2, 1, 2, 0, 5, 5, 5, -8, -2, 1, 2, 1, -5, 1, 2, -5, -2, -2, 3, -7, 1, -8, -8, -5, -1, 5, 3, 1, -10, -7, -7, -2, 0, 3, -3, -3, -3, -11, -11, -7, -5, 4, -4, -9, -11, -6, 7, -1, -2, -3, 2, -7, 3, 3, -13, -4, -9, 1, -5, 5, 6, 3, -4, -3, -5, -7, 4, -2, -1, -10, -4, -6, 4, 2, 1, -6, -13, 1, 3, -6, 2, -1, -2, -6, -8, -7, -8, -11, -13, -7, 3, -7, 1, -2, -1, 1, -7, 1, -6, 3, -4, 8, -2, -7, 5, 0, 4, -1, 0, -1, 4, 1, -4, -7, -4, -4, -6, 1, -7, -4, -7, -3, -7, 2, 10, -7, -5, -8, -2, -3, -2, -7, 2, -3, -4, -6, -4, 6, 2, 2, -8, 3, 7, 3, -5, 2, 5, 2, 8, -8, 6, -2, 9, 1, -4, 2, 6, 1, -2, -10, 2, -4, 1, 3, -4, 1, 10, -6, 8, -1, -11, -5, -4, -4, 1, -7, -1, -11, 2, 2, -8, 1, -11, 1, 1, 0, -5, 0, -5, -3, -3, -7, 1, -3, -6, 1, -4, -3, 8, -8, -3, -4, -13, -5, -5, -1, -4, -11, -4, -8, -3, -5, -9, -7, -8, -14, -6, 4, 0, -1, -1, 3, -1, -5, 1, 5, 5, -6, 6, 2, -3, -5, -4, -2, -6, -1, -8, 2, 7, 2, 1, 3, -6, 0, -6, -3, -5, 5, -14, 7, -2, -7, -6, 4, 5, 6, -6, 4, 0, -3, -5, 0, -5, -1, 0, -3, -6, -7, -12, 0, 6, -3, 2, 4, 0, -11, -11, -3, -8, -2, -9, -6, -7, -4, 13, -7, 0, 2, 1, 0, -6, -1, 0, 9, -3, -7, 3, -5, -4, -5, -9, -3, -9, 
  -4, -5, -2, -10, 1, -6, -6, 2, -8, -2, -2, 3, 6, -10, -2, -5, -13, -1, 4, -8, -4, -2, 0, 0, 8, -1, -1, 0, 3, -18, -1, -3, -15, -13, -3, -4, -14, -2, 3, 5, -5, 0, 2, 1, 2, -13, -6, 4, -5, -14, -5, 3, 1, -12, -6, 0, 4, 2, 3, 3, 7, -6, -11, 2, -8, -9, -1, -6, -1, 4, 1, -2, 1, -11, -1, -2, 5, -10, -4, -3, -5, 3, 1, -2, -9, 7, 3, -4, 0, 4, 2, -5, -5, -4, -10, -8, -2, 5, 6, 4, -3, -8, 2, -7, -3, -8, 1, -7, 0, 9, 7, 2, -3, -9, 1, -1, 2, -4, 7, -5, -3, 3, -3, -4, -6, -4, -4, 5, -5, -5, 1, -13, -1, -4, 5, 1, 2, 0, 2, -4, -6, -13, 1, -8, -18, -14, -6, -8, 3, -2, -3, -5, 7, -7, 5, -14, 0, -5, -7, -7, -11, -14, 2, -11, -3, 1, 3, -5, 2, 0, -4, -4, -2, -10, 0, -3, -14, -8, 4, -8, -9, 1, -9, -1, -4, 1, 2, -5, -1, -10, -5, 7, -10, -11, -5, -4, -6, -14, 2, -5, -4, 6, 5, -5, -10, -10, -9, -2, -10, -7, 0, -5, -5, -11, -6, -2, -5, 3, -1, -7, 3, -19, -5, 2, -5, -2, -4, -8, -5, 1, -4, -5, -5, 0, -3, 3, 4, -5, -3, 9, -13, -10, -3, -6, -9, 0, -5, -6, -4, -9, 1, -1, -2, -13, -8, -9, -6, -13, -8, -6, -2, -1, -6, -5, 0, 5, -1, 2, -6, -8, -8, 1, -6, -16, -3, -5, -9, -3, -4, 2, 3, 0, 11, -9, -2, -14, -10, 5, -12, -8, -8, -7, -5, -1, -7, 0, 3, -4, 0, 1, -7, -2, -7, 8, -13, -13, -6, -13, 4, -2, -1, -4, 1, 3, -1, -9, 3, -12, -6, 8, 0, 5, 0, -7, -3, 2, -3, -1, 1, 0, 0, -9, 9, -9, -9, -6, -6, -16, 4, 1, -7, 0, 2, -4, -12, -6, -1, -5, -7, -10, 0, -7, -18, -16, 2, -8, -5, 2, 1, -8, 4, 4, 1, 0, 2, -10, 3, 6, -14, -6, -3, -2, -1, 0, 8, -1, -5, -3, -4, -11, 6, -13, -11, -4, -14, -2, 3, -8, -5, 3, -5, -11, -6, -8, 3, -12, 4, -12, -8, -4, -10, -6, 3, -10, -12, -2, 9, -8, -2, 1, -2, 0, 9, -12, 0, 6, -6, 1, -4, -10, -5, -3, -1, -6, 3, -2, -2, -3, -5, -11, 1, -4, -10, -8, -3, -12, -11, -1, -2, -9, 5, 0, -1, -4, -5, -10, 5, 1, -7, -6, -5, -3, -4, 0, -4, 4, -7, 0, -8, 3, 0, -8, -7, 0, -10, -5, -2, 3, 0, -4, 2, 10, 2, 2, -1, -3, 6, -8, -7, 3, -7, 0, -3, -6, -1, -1, -1, 10, -3, 7, 5, 0, -4, -7, -4, 0, -5, 1, -3, 1, -2, -2, 1, -3, 2, 7, 2, -3, 5, -11, -6, -6, -13, -11, -5, -7, 1, -5, -4, -6, 6, 0, 2, 0, -1, -11, 1, 7, -5, 1, 3, -5, -1, 6, 1, -1, -3, -3, 2, 2, -1, -5, 0, 7, -11, -9, -5, -11, 3, -3, 1, -10, -1, -3, -1, -4, -1, -10, -3, 7, -3, -16, -3, 2, -8, 4, 3, -5, -7, 4, -4, -1, -2, -8, -4, -1, -4, -1, -2, -5, -9, 1, 1, -5, 5, 0, -1, -1, -2, -11, 2, -2, -12, -5, -1, -1, -4, -11, 0, -12, 1, -5, -1, 0, 1, -16, -4, -2, -7, 4, -1, -4, -11, -3, 1, -5, 1, -2, 6, 0, -7, -7, -5, 3, -11, 1, 1, -12, -9, 2, -7, 6, -4, 0, 6, -9, 7, -4, -2, 1, -7, -11, 3, -13, -3, 1, 6, -2, -5, 4, -8, -4, -8, -5, 4, -2, -3, -13, -3, 0, -11, -1, -11, -2, 1, -2, 1, 8, 6, -5, -5, 0, -13, -1, 4, 3, -2, 2, -5, 5, 9, 1, -4, -5, -2, -1, -3, -2, -12, -4, -2, 1, -2, -6, 0, -3, 5, -5, -6, 7, 4, -13, 2, -1, -17, 2, 0, -6, -8, -7, 4, 0, 4, -3, 3, -5, 0, -5, -4, 3, -9, -10, 0, -6, -3, -2, -1, 6, 0, -3, -5, -1, 1, -11, -5, -4, -13, -6, -1, -5, 1, -9, -3, -8, -5, 3, 6, -12, 1, -7, 1, 11, -9, -10, 0, -15, 4, -5, -2, -4, 2, 0, 2, -4, 6, -12, -2, -2, -9, -7, 8, 4, -1, -6, -10, -2, -4, 0, -1, -8, 4, -10, -3, 6, -13, 3, -5, -11, 2, -6, -2, -4, -3, 1, 2, 0, -1, -4, 0, -5, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 20,800 } };
const TfArray<1, float> quant10_scale = { 1, { 0.015074116177856922, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[20] = { 325, -441, -273, -227, -183, -1214, 107, -458, 236, -483, 3944, 2661, 29, -1396, -961, -109, -1856, -2123, -606, -287, };
const TfArray<1, int> tensor_dimension11 = { 1, { 20 } };
const TfArray<1, float> quant11_scale = { 1, { 0.00016458472236990929, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[10*20] = { 
  23, -17, -18, -3, -17, -31, -25, 5, 22, -3, -20, -6, -17, -2, 10, 3, -47, 4, -6, 10, 
  3, 8, -16, -8, -12, -5, 4, 0, -14, -7, 41, 18, 0, 7, -8, -6, 21, -11, 14, -20, 
  -4, -6, -17, 14, 10, 47, 16, -5, -8, -12, 41, 25, 13, 8, 3, -4, -11, 14, 3, -14, 
  22, -15, 2, 1, -15, -35, -26, -8, 17, -1, -28, -16, 2, -5, 5, -5, -17, 12, 6, -9, 
  12, -15, 15, 3, 9, 18, -20, -6, -9, 12, -9, -11, 2, 17, -14, -18, 11, 1, 8, -9, 
  -12, -127, 8, 1, 0, -12, 8, 16, -26, 5, 49, 7, -13, -3, -11, 1, 24, 3, -8, -7, 
  -20, -39, -18, -8, 1, 8, -11, 7, -6, 18, 17, -15, -19, -15, 3, -14, 20, -17, 12, -15, 
  10, -21, -9, -3, 8, -17, 7, 2, -13, -16, 16, 39, -26, -20, 17, -4, -2, -19, 9, 12, 
  -14, 2, 14, -11, -2, -9, -2, -1, -16, 15, 1, -19, -10, -20, 1, -20, -17, 18, -1, 18, 
  -2, 5, 7, -14, -12, -25, 25, 0, -19, -10, -16, -25, -5, -2, 1, -5, -4, -1, -4, 10, 
};
const TfArray<2, int> tensor_dimension12 = { 2, { 10,20 } };
const TfArray<1, float> quant12_scale = { 1, { 0.023152999579906464, } };
const TfArray<1, int> quant12_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[10] = { 39, 63, 42, 59, -43, 90, -42, 15, -6, -17, };
const TfArray<1, int> tensor_dimension13 = { 1, { 10 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0071524619124829769, } };
const TfArray<1, int> quant13_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[2*10] = { 
  -127, 72, 74, -113, 69, 124, 3, 45, 21, -25, 
  -7, -65, -48, 96, 50, -82, -19, -56, 80, -107, 
};
const TfArray<2, int> tensor_dimension14 = { 2, { 2,10 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0081755062565207481, } };
const TfArray<1, int> quant14_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int32_t tensor_data15[2] = { -22, 22, };
const TfArray<1, int> tensor_dimension15 = { 1, { 2 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0049320175312459469, } };
const TfArray<1, int> quant15_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,199,40 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0018229166744276881, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,199,8 } };
const TfArray<1, float> quant17_scale = { 1, { 0.011278482154011726, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,199,1,8 } };
const TfArray<1, float> quant18_scale = { 1, { 0.011278482154011726, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,100,1,8 } };
const TfArray<1, float> quant19_scale = { 1, { 0.011278482154011726, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,1,100,8 } };
const TfArray<1, float> quant20_scale = { 1, { 0.011278482154011726, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,100,16 } };
const TfArray<1, float> quant21_scale = { 1, { 0.010918366722762585, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,100,1,16 } };
const TfArray<1, float> quant22_scale = { 1, { 0.010918366722762585, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.010918366722762585, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<2, int> tensor_dimension24 = { 2, { 1,800 } };
const TfArray<1, float> quant24_scale = { 1, { 0.010918366722762585, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<2, int> tensor_dimension25 = { 2, { 1,20 } };
const TfArray<1, float> quant25_scale = { 1, { 0.30892160534858704, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<2, int> tensor_dimension26 = { 2, { 1,10 } };
const TfArray<1, float> quant26_scale = { 1, { 0.60326755046844482, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<2, int> tensor_dimension27 = { 2, { 1,2 } };
const TfArray<1, float> quant27_scale = { 1, { 0.74375444650650024, } };
const TfArray<1, int> quant27_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,2 } };
const TfArray<1, float> quant28_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,2 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 18 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,3 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 20,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,4 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 22 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,5 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 24,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteFullyConnectedParams opdata10 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs10 = { 3, { 25,12,13 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLiteFullyConnectedParams opdata11 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs11 = { 3, { 26,14,15 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteSoftmaxParams opdata12 = { 1 };
const TfArray<1, int> inputs12 = { 1, { 27 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 7968, (TfLiteIntArray*)&tensor_dimension0, 7960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 7960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 7968, (TfLiteIntArray*)&tensor_dimension17, 1592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 1592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension19, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension21, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension23, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension25, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension27, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(size_t i, TfLiteEvalTensor *tensor) {
  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 29;
  for (size_t i = 0; i < 29; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 13; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 13; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus trained_model_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  28, 
};
TfLiteStatus trained_model_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 13; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
